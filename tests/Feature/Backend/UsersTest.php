<?php

namespace Tests\Feature\Backend;

use App\Http\Livewire\UserDataTable;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Livewire\Livewire;
use Tests\TestCase;

class UsersTest extends TestCase {
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->signInAdmin();
    }

    /** @test */
    public function it_is_not_authorized_for_logged_in_users(): void
    {
        auth()->logout();

        $this->get(route('users.index'))->assertRedirect('/login');

        $this->signIn();

        $this->get(route('users.index'))->assertStatus(403);
    }

    /** @test */
    public function it_renders_a_datatable_for_users_with_admin_role(): void
    {
        $this->signInAdmin();

        $this->get(route('users.index'))->assertStatus(200);
    }

    /** @test */
    public function it_contains_user_data_table_livewire_component_on_index_page(): void
    {
        $this->signInAdmin();

        $this->get(route('users.index'))->assertSeeLivewire('user-data-table');
    }

    /** @test */
    public function it_has_an_admin_checkbox_in_index_users_data_table_that_filters_admins(): void
    {
        $user = $this->signIn();
        $admin = $this->signInAdmin();

        Livewire::test(UserDataTable::class)
            ->assertSee($admin->name)
            ->assertSee($user->name)
            ->set('admin', true)
            ->assertSee($admin->name)
            ->assertDontSee($user->name);
    }

    /** @test */
    public function it_can_search_for_user_name_in_index_users_data_table(): void
    {
        $bob = User::factory()->create(['name' => 'Bob Tester']);
        $alice = User::factory()->create(['name' => 'Alice Tester']);

        Livewire::test(UserDataTable::class)
            ->set('search', 'bob')
            ->assertSee($bob->name)
            ->assertDontSee($alice->name);
    }

    /** @test */
    public function it_can_search_for_user_email_in_index_users_data_table(): void
    {
        $bob = User::factory()->create(['email' => 'bob@example.org']);
        $alice = User::factory()->create(['email' => 'alice@example.org']);

        Livewire::test(UserDataTable::class)
            ->set('search', 'bob@example.org')
            ->assertSee($bob->name)
            ->assertDontSee($alice->name);
    }

    /** @test */
    public function it_can_sorts_by_user_name_ascending_in_index_users_data_table(): void
    {
        $bob = User::factory()->create(['name' => 'Bob Tester']);
        $alice = User::factory()->create(['name' => 'Alice Tester']);
        $gregor = User::factory()->create(['name' => 'Gregor Tester']);

        Livewire::test(UserDataTable::class)
            ->call('sortBy', 'name')
            ->assertSeeInOrder([$alice->name, $bob->name, $gregor->name]);
    }

    /** @test */
    public function it_can_sorts_by_user_name_descending_in_index_users_data_table(): void
    {
        $bob = User::factory()->create(['name' => 'Bob Tester']);
        $alice = User::factory()->create(['name' => 'Alice Tester']);
        $gregor = User::factory()->create(['name' => 'Gregor Tester']);

        Livewire::test(UserDataTable::class)
            ->call('sortBy', 'name')
            ->call('sortBy', 'name')
            ->assertSeeInOrder([$gregor->name, $bob->name, $alice->name]);
    }

    /** @test */
    public function it_can_sorts_by_user_email_ascending_in_index_users_data_table(): void
    {
        $bob = User::factory()->create(['email' => 'bob@example.org']);
        $alice = User::factory()->create(['email' => 'alice@example.org']);
        $gregor = User::factory()->create(['email' => 'gregor@example.org']);

        Livewire::test(UserDataTable::class)
            ->call('sortBy', 'email')
            ->assertSeeInOrder([$alice->name, $bob->name, $gregor->name]);
    }

    /** @test */
    public function it_can_sorts_by_user_email_descending_in_index_users_data_table(): void
    {
        $bob = User::factory()->create(['email' => 'bob@example.org']);
        $alice = User::factory()->create(['email' => 'alice@example.org']);
        $gregor = User::factory()->create(['email' => 'gregor@example.org']);

        Livewire::test(UserDataTable::class)
            ->call('sortBy', 'email')
            ->call('sortBy', 'email')
            ->assertSeeInOrder([$gregor->name, $bob->name, $alice->name]);
    }
}
