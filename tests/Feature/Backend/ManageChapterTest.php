<?php

namespace Tests\Feature\Backend;

use App\Models\Chapter;
use Illuminate\Foundation\Testing\RefreshDatabase;
use App\Models\Series;
use Illuminate\Foundation\Testing\WithFaker;
use Facades\Tests\Setup\SeriesFactory;
use Tests\TestCase;

class ManageChapterTest extends TestCase
{
    use RefreshDatabase;
    use WithFaker;

    private Series $series;
    private Chapter $chapter;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->series = SeriesFactory::withClips(2)->ownedBy($this->signInRole('moderator'))->create();
        $this->chapter = Chapter::factory()->create(['series_id' => $this->series->id]);
    }

    /** @test */
    public function it_shows_a_manage_chapters_button_on_series_edit_page(): void
    {
        $this->get(route('series.edit', $this->series))->assertSee('Manage chapters');
    }

    /** @test */
    public function it_has_an_index_page_for_series_chapters(): void
    {
        $this->get(route('series.chapters.index', $this->series))
            ->assertOk()
            ->assertSee($this->series->title);
    }

    /** @test */
    public function it_shows_a_403_page_for_simple_users(): void
    {
        auth()->logout();
        $this->signInRole('user');

        $this->get(route('series.chapters.index', $this->series))->assertForbidden();
    }

    /** @test */
    public function it_shows_a_403_if_moderator_is_not_an_owner(): void
    {
        auth()->logout();

        $this->signInRole('moderator');

        $this->get(route('series.chapters.index', $this->series))->assertForbidden();
    }

    /** @test */
    public function it_has_a_create_chapter_button_in_index_page(): void
    {
        $this->get(route('series.chapters.index', $this->series))->assertSee('Create chapter');
    }

    /** @test */
    public function it_lists_series_chapters_in_index_page_if_any(): void
    {
        $this->get(route('series.chapters.index', $this->series))
            ->assertSee('Series chapters');

        $this->get(route('series.chapters.index', $this->series))->assertSee($this->series->chapters()->first()->title);
    }

    /** @test */
    public function it_can_store_a_chapter_for_a_series(): void
    {
        $attributes = [
            'position' => 1,
            'title'    => $this->faker->sentence()
        ];
        $this->post(route('series.chapters.create', $this->series), $attributes)
            ->assertRedirect(route('series.chapters.index', $this->series));
    }

    /** @test */
    public function it_requires_an_position_to_create_a_chapter(): void
    {
        $attributes = [
            'position' => '',
            'title'    => $this->faker->sentence()
        ];

        $this->post(route('series.chapters.create', $this->series), $attributes)
            ->assertSessionHasErrors('position');
    }

    /** @test */
    public function it_requires_a_title_to_create_a_chapter(): void
    {
        $attributes = [
            'position' => '1',
            'title'    => ''
        ];

        $this->post(route('series.chapters.create', $this->series), $attributes)
            ->assertSessionHasErrors('title');
    }

    /** @test */
    public function it_shows_a_403_for_chapter_editing_if_moderator_is_not_an_owner(): void
    {
        auth()->logout();

        $this->signInRole('moderator');

        $this->get(route('series.chapters.edit', [$this->series, $this->chapter]))->assertForbidden();
    }

    /** @test */
    public function it_can_edit_a_chapter(): void
    {
        $this->get(route('series.chapters.edit', [$this->series, $this->chapter]))->assertOk();
    }

    /** @test */
    public function it_lists_all_clips_on_chapter_edit_page(): void
    {
        $this->get(route('series.chapters.edit', [$this->series, $this->chapter]))
            ->assertSee($this->series->clips()->first()->title)
            ->assertSee($this->series->latestClip->title);
    }

    /** @test */
    public function it_requires_an_array_of_clip_ids_to_assign_them_to_a_chapter(): void
    {
        $attributes = [
            'ids' => '62',
        ];

        $this->patch(route('series.chapters.addClips', [
            $this->series,
            $this->chapter]), $attributes)->assertSessionHasErrors('ids');
    }

    /** @test */
    public function it_can_add_a_clip_to_a_chapter(): void
    {
        $attributes = [
            'ids' => [$this->series->clips()->first()->id],
        ];

        $this->patch(route('series.chapters.addClips', [
            $this->series,
            $this->chapter]), $attributes);

        $this->assertEquals(1, $this->chapter->clips()->count());
    }

    /** @test */
    public function it_requires_an_array_of_clip_ids_to_remove_them_from_a_chapter(): void
    {
        $attributes = [
            'ids' => '62',
        ];

        $this->patch(route('series.chapters.removeClips', [
            $this->series,
            $this->chapter]), $attributes)->assertSessionHasErrors('ids');
    }

    /** @test */
    public function it_can_remove_a_clip_from_a_chapter(): void
    {
        $this->assertEquals(0, $this->chapter->clips()->count());

        $clip = $this->series->clips()->first();
        $clip->chapter_id = $this->chapter->id;
        $clip->save();

        $this->assertEquals(1, $this->chapter->clips()->count());

        $attributes = [
            'ids' => [$this->series->clips()->first()->id,]
        ];

        $this->patch(route('series.chapters.removeClips', [$this->series, $this->chapter]), $attributes);

        $this->assertEquals(0, $this->chapter->clips()->count());
    }

    /** @test */
    public function it_can_edit_chapters(): void
    {
        $attributes = [
            'chapters' => [
                $this->chapter->id => [
                    'position' => '3',
                    'title'    => 'changed'
                ],
            ]
        ];

        $this->put(route('series.chapters.update', $this->series), $attributes);
        $this->chapter->refresh();

        $this->assertEquals('changed', $this->chapter->title);
    }

    /** @test */
    public function it_can_delete_a_chapter(): void
    {
        $this->delete(route('series.chapters.delete', [$this->series, $this->chapter]));

        $this->assertDatabaseMissing('chapters', ['id' => $this->chapter->id]);
    }

    /** @test */
    public function it_sets_clip_chapter_id_to_null_if_chapter_is_deleted(): void
    {
        $clip = $this->series->clips()->first();
        $clip->chapter_id = $this->chapter->id;
        $clip->save();

        $this->delete(route('series.chapters.delete', [$this->series, $this->chapter]));

        $clip->refresh();

        $this->assertNull($this->series->clips()->first()->chapter_id);
    }
}
