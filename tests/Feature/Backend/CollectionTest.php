<?php

namespace Tests\Feature\Backend;

use App\Models\Collection;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class CollectionTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->signInRole('admin');
    }

    /** @test */
    public function it_allows_index_collections_only_for_admins(): void
    {
        auth()->logout();

        $this->signInRole('moderator');

        $this->get(route('collections.index'))->assertForbidden();
    }

    /** @test */
    public function it_lists_all_available_collections(): void
    {
        Collection::factory(2)->create();
        $this->get(route('collections.index'))
            ->assertOk()
            ->assertViewHas(['collections'])
            ->assertSee(Collection::all()->first()->title);
    }

    /** @test */
    public function it_renders_a_create_form_for_new_collection(): void
    {
        $this->get(route('collections.create'))
            ->assertOk()
            ->assertSee('position')
            ->assertSee('title')
            ->assertSee('description')
            ->assertSee('is_public');
    }

    /** @test */
    public function it_requires_a_position_to_create_a_collection(): void
    {
        $attributes = [
            'position'    => '',
            'title'       => 'Test',
            'description' => 'test',
            'is_public'   => false,
        ];

        $this->post(route('collections.store'), $attributes)->assertSessionHasErrors('position');
    }

    /** @test */
    public function it_requires_a_title_to_create_a_collection(): void
    {
        $attributes = [
            'position'    => '1',
            'title'       => '',
            'description' => 'test',
            'is_public'   => false,
        ];

        $this->post(route('collections.store'), $attributes)->assertSessionHasErrors('title');
    }

    /** @test */
    public function it_persists_a_collection_to_database(): void
    {
        $attributes = [
            'position'    => '1',
            'title'       => 'Test',
            'description' => 'test',
            'is_public'   => 'on',
        ];

        $this->post(route('collections.store'), $attributes)
            ->assertRedirect();

        $this->assertDatabaseHas('collections', [
            'position'    => '1',
            'title'       => 'Test',
            'description' => 'test',
            'is_public'   => true,
        ]);
    }

    /** @test */
    public function it_can_edit_collections(): void
    {
        $this->get(route('collections.edit', Collection::factory()->create()))
            ->assertOk()
            ->assertViewHas('collection')
            ->assertSee('position')
            ->assertSee('title')
            ->assertSee('description')
            ->assertSee('is_public')
            ->assertViewIs('backend.collections.edit')
            ->assertSee('Toggle clips');
    }

    /** @test */
    public function it_can_update_collections(): void
    {
        $collection = Collection::factory()->create();

        $attributes = $collection->toArray();
        $attributes['description'] = 'changed';

        $this->patch(route('collections.update', $collection), $attributes)->assertRedirect();

        $this->assertDatabaseHas('collections', [
            'id'          => $collection->id,
            'description' => 'changed'
        ]);
    }

    /** @test */
    public function it_requires_a_title_to_update_a_collection(): void
    {
        $collection = Collection::factory()->create();

        $attributes = $collection->toArray();
        $attributes['title'] = '';
        $attributes['description'] = 'changed';

        $this->patch(route('collections.update', $collection), $attributes)->assertSessionHasErrors('title');

        $this->assertDatabaseMissing('collections', [
            'id'          => $collection->id,
            'description' => 'changed'
        ]);
    }

    /** @test */
    public function it_can_delete_a_collection(): void
    {
        $collection = Collection::factory()->create();

        $this->delete(route('collections.destroy', $collection))->assertRedirect();

        $this->assertDatabaseMissing('collections', [$collection->id]);
    }
}
