<?php

namespace Tests\Feature\Backend;

use App\Models\Setting;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ManageSettingsTest extends TestCase
{
    use RefreshDatabase;

    public Setting $setting;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->signInRole('superadmin');

        $this->setting = Setting::create(
            ['name' => 'opencast',
             'data' => [
                 'url'      => 'localhost:8080',
                 'username' => 'admin',
                 'password' => 'opencast',
             ]
            ]
        );
    }

    /** @test */
    public function it_denies_access_for_admins(): void
    {
        auth()->logout();

        $this->signInRole('admin');

        $this->get(route('settings.portal.index'))->assertForbidden();
    }

    /** @test */
    public function it_allows_access_for_superadmins(): void
    {
        $this->get(route('settings.portal.index'))->assertOk();
    }

    /** @test */
    public function it_has_portal_settings_page(): void
    {
        $this->get(route('settings.portal.show'))
            ->assertOk()
            ->assertSee('Maintenance mode');
    }

    /** @test */
    public function it_can_set_portal_to_maintenace_mode_via_portal_settings(): void
    {
        $this->get(route('settings.portal.show'))
            ->assertOk()
            ->assertSee('Maintenance mode');
    }

    /** @test */
    public function it_has_opencast_settings_page(): void
    {
        $this->get(route('settings.opencast.show'))
            ->assertOk()
            ->assertSee('localhost:8080')
            ->assertSee('admin')
            ->assertSee('Admin password');
    }

    /** @test */
    public function it_requires_an_opencast_admin_url_for_opencast_settings_page(): void
    {
        $attributes = [
            'username' => 'admin',
            'password' => '1234'
        ];

        $this->put(route('settings.opencast.update', $this->setting), $attributes)
            ->assertSessionHasErrors('url');
    }

    /** @test */
    public function it_requires_an_opencast_admin_username_for_opencast_settings_page(): void
    {
        $attributes = [
            'url'      => 'test.com',
            'password' => '1234'
        ];

        $this->put(route('settings.opencast.update', $this->setting), $attributes)
            ->assertSessionHasErrors('username');
    }

    /** @test */
    public function it_requires_an_opencast_admin_password_for_opencast_settings_page(): void
    {
        $attributes = [
            'url'      => 'test.com',
            'username' => 'admin'
        ];

        $this->put(route('settings.opencast.update', $this->setting), $attributes)
            ->assertSessionHasErrors('password');
    }

    /** @test */
    public function it_updated_opencast_settings_page(): void
    {
        $attributes = [
            'url'                   => 'test.com',
            'username'              => 'test',
            'password'              => 1234,
            'archive_path'          => '/archive/mh_default',
            'default_workflow_id'   => 'fast-test',
            'upload_workflow_id'    => 'fast-test',
            'theme_id_top_right'    => '500',
            'theme_id_top_left'     => '501',
            'theme_id_bottom_left'  => '502',
            'theme_id_bottom_right' => '503',
        ];

        $this->followingRedirects()
            ->put(route('settings.opencast.update', $this->setting), $attributes)
            ->assertSee('test.com')
            ->assertSee('fast-test');
    }
}
