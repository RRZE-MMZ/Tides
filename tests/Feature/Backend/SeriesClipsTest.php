<?php

namespace Tests\Feature\Backend;

use App\Models\Clip;
use App\Models\User;
use Facades\Tests\Setup\SeriesFactory;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Facades\Tests\Setup\ClipFactory;
use Tests\TestCase;

class SeriesClipsTest extends TestCase
{
    use RefreshDatabase;
    use WithFaker;

    private string $role = '';

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->role = 'moderator';
    }

    /** @test */
    public function a_non_authorize_user_cannot_view_add_clip_to_series_form(): void
    {
        $this->get(route('series.clips.create', SeriesFactory::create()))->assertRedirect('login');
    }

    /** @test */
    public function a_moderator_user_cannot_view_add_clip_to_series_form_for_not_owned_series(): void
    {
        $series = SeriesFactory::create();

        $this->signInRole($this->role);

        $this->get(route('series.clips.create', $series))->assertForbidden();
    }

    /** @test */
    public function a_series_owner_can_add_a_clip_to_series(): void
    {
        $series = SeriesFactory::ownedBy($this->signInRole($this->role))->create();

        $this->get(route('series.clips.create', $series))->assertOk();
    }

    /** @test */
    public function a_series_member_can_add_a_clip_to_series(): void
    {
        $series = SeriesFactory::create();

        $user = User::factory()->create()->assignRole($this->role);

        $this->signIn($user);

        $this->get(route('series.clips.create', $series))->assertForbidden();

        $series->addMember($user);

        $this->get(route('series.clips.create', $series))->assertOk();
    }

    /** @test */
    public function an_admin_can_view_add_clip_to_series_form_for_not_owned_series(): void
    {
        $series = SeriesFactory::create();

        $this->signInRole('admin');

        $this->get(route('series.clips.create', $series))->assertOk();
    }

    /** @test */
    public function a_series_owner_can_view_add_clip_to_course_form(): void
    {
        $series = SeriesFactory::ownedBy($this->signInRole($this->role))->create();

        $this->get(route('series.clips.create', $series))->assertOk()
            ->assertSee('title')
            ->assertSee('recording_date')
            ->assertSee('description')
            ->assertSee('organization')
            ->assertSee('language')
            ->assertSee('context')
            ->assertSee('format')
            ->assertSee('type')
            ->assertSee('presenters')
            ->assertSee('tags')
            ->assertSee('acls')
            ->assertSee('semester')
            ->assertSee('is_public');
    }

    /** @test */
    public function a_series_owner_can_add_clip_to_series(): void
    {
        $series = SeriesFactory::ownedBy($this->signInRole($this->role))->create();

        $this->post(route('series.clips.store', $series), Clip::factory()->raw());

        $this->assertEquals(1, $series->clips()->count());
    }

    /** @test */
    public function a_series_member_can_add_clip_to_series(): void
    {
        $series = SeriesFactory::create();

        $user = $series->addMember(User::factory()->create()->assignRole($this->role));

        $this->signIn($user);

        $this->post(route('series.clips.store', $series), Clip::factory()->raw());

        $this->assertEquals(1, $series->clips()->count());
    }

    /** @test */
    public function an_admin_can_add_clip_to_series(): void
    {
        $series = SeriesFactory::ownedBy($this->signInRole('admin'))->create();

        $this->post(route('series.clips.store', $series), Clip::factory()->raw())->assertStatus(302);

        $this->assertEquals(1, $series->clips()->count());
    }

    /** @test */
    public function it_has_a_view_for_selecting_a_series_for_a_certain_clip(): void
    {
        $clip = ClipFactory::ownedBy($this->signInRole($this->role))->create();
        $series = SeriesFactory::ownedBy($clip->owner)->create();

        $this->get(route('series.clips.listSeries', $clip))->assertSee($series->title);
    }

    /** @test */
    public function it_lists_only_series_that_belong_to_the_moderator(): void
    {
        $series = SeriesFactory::create();
        $clip = ClipFactory::ownedBy($this->signInRole($this->role))->create();

        $this->get(route('series.clips.listSeries', $clip))->assertDontSee($series->title);
    }

    /** @test */
    public function it_lists_series_that_user_has_access_to(): void
    {
        $series = SeriesFactory::create();

        $user = User::factory()->create()->assignRole($this->role);

        $this->signIn($user);

        $clip = ClipFactory::ownedBy($user)->create();

        $this->get(route('series.clips.listSeries', $clip))->assertSee('You have no series yet');

        $series->addMember($user);

        $this->get(route('series.clips.listSeries', $clip))->assertSee(str()->limit($series->title, 20, '...'));
    }

    /** @test */
    public function it_assigns_a_clip_to_a_series(): void
    {
        $clip = ClipFactory::ownedBy($this->signInRole($this->role))->create();
        $series = SeriesFactory::withClips(2)->ownedBy($clip->owner)->create();

        $this->post(route('series.clips.assign', compact('series', 'clip')))->assertStatus(302);

        $clip->refresh();

        $this->assertEquals($series->id, $clip->series_id);
        $this->assertEquals(3, $clip->episode);
    }

    /** @test */
    public function it_removes_a_clip_from_series(): void
    {
        $series = SeriesFactory::withClips(3)->ownedBy($this->signInRole($this->role))->create();

        $clip = $series->clips()->first();

        $this->delete(route('series.clips.remove', $clip))->assertStatus(302);

        $this->assertEquals(2, $series->clips()->count());
    }

    /** @test */
    public function it_shows_a_reorder_clips_button_on_series_edit_page_for_all_admins(): void
    {
        $series = SeriesFactory::withClips(3)->ownedBy($this->signInRole($this->role))->create();

        $this->get(route('series.edit', $series))->assertSee('Reorder clips');
    }

    /** @test */
    public function it_has_a_view_for_reordering_series_clips_based_on_clip_episode(): void
    {
        $series = SeriesFactory::withClips(3)->ownedBy($this->signInRole($this->role))->create();
        $this->get(route('series.clips.changeEpisode', $series))
            ->assertSee($series->title)
            ->assertSee($series->clips()->first()->title)
            ->assertSee($series->latestClip->title);
    }

    /** @test */
    public function it_validates_an_array_of_integers_for_changing_clips_episodes(): void
    {
        $series = SeriesFactory::withClips(3)->ownedBy($this->signInRole($this->role))->create();
        $attributes = [
            'episodes' => []
        ];
        $this->post(route('series.clips.reorder', $series), $attributes)->assertSessionHasErrors('episodes');
        $attributes = [
            'episodes' => [
                1 => 'asdfasdfasdf',
                2 => '1',
                3 => '2'
            ]
        ];
        $this->post(route('series.clips.reorder', $series), $attributes)->assertSessionHasErrors('episodes.*');
        $attributes = [
            'episodes' => [
                1 => '3',
                2 => '1',
                3 => '2'
            ]
        ];
        $this->post(route('series.clips.reorder', $series), $attributes)->assertSessionHasNoErrors();
    }

    /** @test */
    public function it_changes_clips_episodes_for_a_series(): void
    {
        $this->withoutExceptionHandling();
        $series = SeriesFactory::withClips(3)->ownedBy($this->signInRole($this->role))->create();
        $attributes = [
            'episodes' => [
                1 => '3',
                2 => '1',
                3 => '2'
            ]
        ];
        $this->post(route('series.clips.reorder', $series), $attributes);

        $this->assertEquals(2, Clip::find(3)->episode);
    }
}
