<?php


namespace Tests\Feature\Frontend;

use App\Models\Clip;
use App\Services\WowzaService;
use Facades\Tests\Setup\ClipFactory;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\Psr7\Response;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Storage;
use Tests\Setup\WorksWithWowzaClient;
use Tests\TestCase;

class ClipTest extends TestCase
{

    use RefreshDatabase, WorksWithWowzaClient;

    private Clip $clip;
    private MockHandler $mockHandler;
    private WowzaService $wowzaService;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->clip = ClipFactory::withAssets(2)->create();

        $this->mockHandler = $this->swapWowzaClient();

        $this->wowzaService = app(WowzaService::class);
    }

    /** @test */
    public function a_visitor_cannot_manage_clips(): void
    {
        $this->post(route('clips.store'), [])->assertRedirect('login');

        $this->get(route('clips.create'))->assertRedirect('login');

        $this->patch($this->clip->adminPath(), [])->assertRedirect('login');

        $this->delete($this->clip->adminPath())->assertRedirect('login');
    }

    /** @test */
    public function a_visitor_can_view_a_clip(): void
    {
        $this->get($this->clip->path())->assertSee($this->clip->title);
    }

    /** @test */
    public function it_is_using_a_wowza_source_link_if_wowza_server_is_available(): void
    {
        $this->mockHandler->append($this->mockCheckApiConnection());

        $this->get($this->clip->path())->assertSee('http://172.17.0.2:1935');

        Storage::disk('videos')->delete($this->clip->assets()->first()->path);
    }

    /** @test */
    public function it_is_loads_the_video_file_as_source_in_player(): void
    {
        $this->mockHandler->append(new Response());

        $this->get($this->clip->path())->assertDontSee('http://172.17.0.2:1935');

        Storage::disk('videos')->delete($this->clip->assets()->first()->path);
    }

    /** @test */
    public function an_authorized_user_cannot_view_edit_button_for_not_owned_clip(): void
    {
        $this->mockHandler->append(new Response());

        $this->signIn();

        $this->get($this->clip->path())->assertDontSee('Back to edit page');
    }

    /** @test */
    public function a_visitor_cannot_see_clip_comments(): void
    {
        $this->mockHandler->append(new Response());

        $this->get(route('frontend.clips.show',$this->clip))->assertDontSee('Comments');
    }
}
