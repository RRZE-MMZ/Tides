<?php


namespace Tests\Feature\Frontend;

use App\Models\Clip;
use App\Models\Presenter;
use App\Services\WowzaService;
use Facades\Tests\Setup\ClipFactory;
use Facades\Tests\Setup\SeriesFactory;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\Psr7\Response;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Storage;
use Tests\Setup\WorksWithWowzaClient;
use Tests\TestCase;

class ClipTest extends TestCase
{
    use RefreshDatabase;
    use WorksWithWowzaClient;

    private Clip $clip;
    private MockHandler $mockHandler;
    private WowzaService $wowzaService;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->clip = ClipFactory::withAssets(2)->create();

        $this->mockHandler = $this->swapWowzaClient();

        $this->wowzaService = app(WowzaService::class);
    }

    /** @test */
    public function a_visitor_cannot_manage_clips(): void
    {
        $this->post(route('clips.store'), [])->assertRedirect('login');

        $this->get(route('clips.create'))->assertRedirect('login');

        $this->patch($this->clip->adminPath(), [])->assertRedirect('login');

        $this->delete($this->clip->adminPath())->assertRedirect('login');
    }

    /** @test */
    public function a_visitor_can_view_a_clip(): void
    {
        $this->get($this->clip->path())->assertSee($this->clip->title);
    }

    /** @test */
    public function a_visitor_cannot_view_a_not_public_clip(): void
    {
        $this->mockHandler->append($this->mockCheckApiConnection());

        $this->clip->is_public = false;

        $this->clip->save();

        $this->get($this->clip->path())->assertStatus(403);
    }

    /** @test */
    public function a_visitor_cannot_view_a_clip_page_without_assets(): void
    {
        $this->mockHandler->append($this->mockCheckApiConnection());

        $emptyClip = ClipFactory::withAssets(0)->create();

        $this->get(route('frontend.clips.show', $emptyClip))->assertStatus(403);
    }

    /** @test */
    public function a_logged_in_user_cannot_view_a_clip_page_without_assets(): void
    {
        $this->mockHandler->append($this->mockCheckApiConnection());

        $emptyClip = ClipFactory::withAssets(0)->create();

        $this->signIn();

        $this->get(route('frontend.clips.show', $emptyClip))->assertStatus(403);
    }

    /** @test */
    public function a_clip_owner_can_view_a_clip_page_without_assets(): void
    {
        $this->mockHandler->append($this->mockCheckApiConnection());

        $emptyClip = ClipFactory::withAssets(0)->create();

        $this->actingAs($emptyClip->owner);

        $this->get(route('frontend.clips.show', $emptyClip))->assertStatus(200);
    }

    /** @test */
    public function an_admin_can_view_a_clip_page_without_assets(): void
    {
        $this->mockHandler->append($this->mockCheckApiConnection());

        $emptyClip = ClipFactory::withAssets(0)->create();

        $this->signInRole('admin');

        $this->get(route('frontend.clips.show', $emptyClip))->assertStatus(200);
    }

    /** @test */
    public function a_clip_owner_can_view_a_not_public_clip(): void
    {
        $this->mockHandler->append($this->mockCheckApiConnection());

        $user = $this->signIn();

        $this->clip->owner_id = $user->id;
        $this->clip->is_public = false;

        $this->clip->save();

        $this->get($this->clip->path())->assertStatus(200);
    }

    /** @test */
    public function an_admin_can_view_a_not_public_clip(): void
    {
        $this->mockHandler->append($this->mockCheckApiConnection());

        $this->signInRole('admin');

        $this->clip->is_public = false;

        $this->clip->save();

        $this->get($this->clip->path())->assertStatus(200);
    }

    /** @test */
    public function a_visitor_cannot_view_a_clip_that_belongs_to_a_not_public_series(): void
    {
        $series = SeriesFactory::notPublic()->create();

        $this->clip->series_id = $series->id;

        $this->clip->save();

        $this->get($this->clip->path())->assertStatus(403);
    }

    /** @test */
    public function a_clip_owner_can_view_a_clip_that_belongs_to_a_not_public_series(): void
    {
        $this->mockHandler->append($this->mockCheckApiConnection());

        $user = $this->signIn();

        $series = SeriesFactory::notPublic()->create();

        $this->clip->series_id = $series->id;
        $this->clip->owner_id = $user->id;

        $this->clip->save();

        $this->get($this->clip->path())->assertStatus(200);
    }

    /** @test */
    public function it_is_using_a_wowza_source_link_if_wowza_server_is_available(): void
    {
        $this->mockHandler->append($this->mockCheckApiConnection());

        $this->get($this->clip->path())->assertSee(env('WOWZA_ENGINE_URL'));

        Storage::disk('videos')->delete($this->clip->assets()->first()->pth);
    }

    /** @test */
    public function it_is_loads_the_video_file_as_source_in_player(): void
    {
        $this->mockHandler->append(new Response());

        $this->get($this->clip->path())->assertDontSee('http://172.17.0.2:1935');

        Storage::disk('videos')->delete($this->clip->assets()->first()->path);
    }

    /** @test */
    public function an_authorized_user_cannot_view_edit_button_for_not_owned_clip(): void
    {
        $this->mockHandler->append(new Response());

        $this->signIn();

        $this->get($this->clip->path())->assertDontSee('Back to edit page');
    }

    /** @test */
    public function a_visitor_cannot_see_clip_comments(): void
    {
        $this->mockHandler->append(new Response());

        $this->get(route('frontend.clips.show', $this->clip))->assertDontSee('Comments');
    }

    /** @test */
    public function it_shows_clip_tags_if_any(): void
    {
        $this->mockHandler->append(new Response());

        $this->get(route('frontend.clips.show', $this->clip))->assertDontSee('Tags');

        $this->clip->addTags(collect(['single tag', 'tides', 'testTags']));

        $this->get(route('frontend.clips.show', $this->clip))
            ->assertSee('Tags')
            ->assertSee('testTags');
    }

    /** @test */
    public function it_shows_clip_presenters_if_any(): void
    {
        $this->mockHandler->append(new Response(), new Response());

        $presenters = Presenter::factory(2)->create();

        $this->get(route('frontend.clips.show', $this->clip))->assertDontSee('Tags');

        $this->clip->addPresenters($presenters);

        $this->get(route('frontend.clips.show', $this->clip))
            ->assertSee(Presenter::find(1)->getFullNameAttribute())
            ->assertSee(Presenter::find(2)->getFullNameAttribute());
    }

    /** @test */
    public function a_user_can_navigate_to_next_and_previous_clip_if_clip_belongs_to_a_series(): void
    {
        $this->mockHandler->append(new Response());

        SeriesFactory::withClips(3)->withAssets(2)->create();

        //the first clip in series will have id of 2. A clip with ID of 1 is already created by setUp method
        $clip = Clip::find(3);
        $previousClip = Clip::find(2);
        $nextClip = Clip::find(4);

        $this->get($clip->path())
            ->assertSee('Previous')
            ->assertSee('Next')
            ->assertSee($previousClip->path())
            ->assertSee($nextClip->path());
    }

    /** @test */
    public function an_intern_acl_clip_must_only_be_available_for_logged_in_users(): void
    {
        $this->mockHandler->append(new Response());

        $this->clip->addAcls(collect(['1']));

        $this->get($this->clip->path())->assertDontSee('plyr-player');
    }
}
