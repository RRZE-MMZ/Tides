<?php

namespace Tests\Feature\Frontend;

use App\Http\Livewire\CommentsSection;
use App\Models\Clip;
use App\Models\Comment;
use Facades\Tests\Setup\ClipFactory;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Livewire\Livewire;
use Tests\TestCase;

class CommentsSectionTest extends TestCase
{
    use RefreshDatabase;

    protected Clip $clip;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->signIn();

        $this->clip = ClipFactory::withAssets(2)->create(['allow_comments' => true]);
    }

    /** @test */
    public function it_contains_comments_section_livewire_component_on_clip_show_page(): void
    {
        $this->get(route('frontend.clips.show', $this->clip))
            ->assertSeeLivewire('comments-section');
    }

    /** @test */
    public function it_allows_posting_comments_only_to_logged_in_users(): void
    {
        Livewire::test(CommentsSection::class)
            ->set('clip', $this->clip)
            ->set('content', 'Test comment')
            ->call('postComment')
            ->assertSee('Comment posted successfully')
            ->assertSee('Test comment');
    }

    /** @test */
    public function it_post_a_valid_comment(): void
    {
        Livewire::test(CommentsSection::class)
            ->set('clip', $this->clip)
            ->set('content', 'Test comment')
            ->call('postComment')
            ->assertSee('Comment posted successfully')
            ->assertSee('Test comment');
    }

    /** @test */
    public function it_requires_a_content(): void
    {
        Livewire::test(CommentsSection::class)
            ->set('clip', $this->clip)
            ->set('content', '')
            ->call('postComment')
            ->assertHasErrors(['content' => 'required']);
    }

    /** @test */
    public function it_requires_content_min_characters(): void
    {
        Livewire::test(CommentsSection::class)
            ->set('clip', $this->clip)
            ->set('content', 'ab')
            ->call('postComment')
            ->assertHasErrors(['content' => 'min']);
    }

    /** @test */
    public function it_displays_a_delete_button_for_comment_owner(): void
    {
        Comment::factory()->create(['clip_id' => $this->clip->id, 'owner_id' => auth()->user()->id]);

        Livewire::test(CommentsSection::class)
            ->set('clip', $this->clip)
            ->assertSee('Delete');
    }

    /** @test */
    public function it_displays_a_delete_button_for_admin_users(): void
    {
        Comment::factory()->create(['clip_id' => $this->clip->id]);

        $this->signInRole('admin');

        Livewire::test(CommentsSection::class)
            ->set('clip', $this->clip)
            ->assertSee('Delete');
    }

    /** @test */
    public function a_comment_owner_can_delete_his_comment(): void
    {
        $comment = Comment::factory()->create([
            'clip_id'  => $this->clip->id,
            'owner_id' => auth()->user()->id,
            'content'  => 'test comment',
        ]);

        Livewire::test(CommentsSection::class)
            ->set('clip', $this->clip)
            ->call('deleteComment', $comment)
            ->assertDontSee('test comment');
    }

    /** @test */
    public function a_user_cannot_delete_other_users_comment(): void
    {
        $comment = Comment::factory()->create([
            'clip_id'  => $this->clip->id,
            'owner_id' => auth()->user()->id,
            'content'  => 'test comment',
        ]);

        auth()->logout();

        $this->signIn();

        Livewire::test(CommentsSection::class)
            ->set('clip', $this->clip)
            ->call('deleteComment', $comment)
            ->assertSee('test comment');
    }

    /** @test */
    public function an_admin_can_delete_a_not_owned_comment(): void
    {
        $comment = Comment::factory()->create([
            'clip_id'  => $this->clip->id,
            'owner_id' => auth()->user()->id,
            'content'  => 'test comment',
        ]);

        $this->signInRole('admin');

        Livewire::test(CommentsSection::class)
            ->set('clip', $this->clip)
            ->call('deleteComment', $comment)
            ->assertDontSee('test comment');
    }
}
