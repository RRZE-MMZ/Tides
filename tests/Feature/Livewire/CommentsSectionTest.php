<?php

use App\Enums\Role;
use App\Livewire\CommentsSection;
use App\Models\Comment;
use App\Models\User;
use App\Notifications\NewComment;
use Facades\Tests\Setup\ClipFactory;
use Facades\Tests\Setup\SeriesFactory;
use Illuminate\Support\Facades\Notification;
use Livewire\Livewire;

use function Pest\Laravel\assertDatabaseHas;
use function Pest\Laravel\get;

beforeEach(function () {
    // TODO: Change the autogenerated stub
    signIn();

    $this->clip = ClipFactory::withAssets(2)->create(['allow_comments' => true]);
});

it('does not contain comments section for non logged in users', function () {
    auth()->logout();

    get(route('frontend.clips.show', $this->clip))
        ->assertDontSeeLivewire('comments-section');

    get(route('frontend.series.show', SeriesFactory::withClips(2)->withAssets(3)->create()))
        ->assertDontSeeLivewire('comments-section');
});

it('contains comments section livewire component on clip show page', function () {
    get(route('frontend.clips.show', $this->clip))
        ->assertSeeLivewire('comments-section');
});

it('contains comments section livewire component on series show page', function () {
    get(route('frontend.clips.show', $this->clip))
        ->assertSeeLivewire('comments-section');
});

it('allows posting comments only to logged in users', function () {
    Livewire::test(CommentsSection::class, [
        'model' => $this->clip,
        'type' => 'frontend',
    ])
        ->set('content', 'Test comment')
        ->call('postComment')
        ->assertSee('Comment posted successfully')
        ->assertSee('Test comment');
});

it('post a valid comment', function () {
    Livewire::test(CommentsSection::class, [
        'model' => $this->clip,
        'type' => 'frontend',
    ])
        ->set('content', 'Test comment')
        ->call('postComment')
        ->assertSee('Comment posted successfully')
        ->assertSee('Test comment');
});

it('requires a content', function () {
    Livewire::test(CommentsSection::class, [
        'model' => $this->clip,
        'type' => 'frontend',
    ])
        ->set('content', '')
        ->call('postComment')
        ->assertHasErrors(['content' => 'required']);
});

it('requires content min characters', function () {
    Livewire::test(CommentsSection::class, [
        'model' => $this->clip,
        'type' => 'frontend',
    ])
        ->set('content', 'ab')
        ->call('postComment')
        ->assertHasErrors(['content' => 'min']);
});

it('displays comments based on type', function () {
    $this->clip->comments()->save(Comment::factory()->create([
        'content' => 'Backend comment',
        'type' => 'backend',
    ]));

    Livewire::test(CommentsSection::class, [
        'model' => $this->clip,
        'type' => 'frontend',
    ])
        ->set('content', 'Test comment')
        ->call('postComment')
        ->assertSee('Comment posted successfully')
        ->assertSee('Test comment')
        ->assertDontSee('Backend comment');
});

it('displays a delete button for comment owner', function () {
    $this->clip->comments()->save(Comment::factory()->create([
        'owner_id' => auth()->user()->id,
        'type' => 'frontend',
    ]));
    $this->clip->refresh();
    Livewire::test(CommentsSection::class, [
        'model' => $this->clip,
        'type' => 'frontend',
    ])
        ->assertSee(__('common.actions.delete'));
});

it('displays a delete button for admin users', function () {
    $this->clip->comments()->save(Comment::factory()->create(['type' => 'frontend']));
    signInRole(Role::ADMIN);

    Livewire::test(CommentsSection::class, [
        'model' => $this->clip,
        'type' => 'frontend',
    ])
        ->assertSee(__('common.actions.delete'));
});

test('a comment owner can delete his comment', function () {
    $comment = Comment::factory()->create([
        'owner_id' => auth()->user()->id,
        'content' => 'test comment',
        'type' => 'frontend',
    ]);
    $this->clip->comments()->save($comment);

    Livewire::test(CommentsSection::class, [
        'model' => $this->clip,
        'type' => 'frontend',
    ])
        ->call('deleteComment', $comment)
        ->assertDontSee('test comment');
});

test('a user cannot delete other users comment', function () {
    $comment = Comment::factory()->create([
        'owner_id' => auth()->user()->id,
        'content' => 'test comment',
        'type' => 'frontend',
    ]);
    $this->clip->comments()->save($comment);
    auth()->logout();
    signIn();

    Livewire::test(CommentsSection::class, [
        'model' => $this->clip,
        'type' => 'frontend',
    ])
        ->call('deleteComment', $comment);

    assertDatabaseHas('comments', [
        'id' => $comment->id,
    ]);
});

test('an admin can delete a not owned comment', function () {
    $comment = Comment::factory()->create([
        'owner_id' => auth()->user()->id,
        'content' => 'test comment',
    ]);
    $this->clip->comments()->save($comment);
    signInRole(Role::ADMIN);

    Livewire::test(CommentsSection::class, [
        'model' => $this->clip,
        'type' => 'frontend',
    ])
        ->call('deleteComment', $comment)
        ->assertDontSee('test comment');
});

it('notifies model admin on new comment', function () {
    Notification::fake();

    Livewire::test(CommentsSection::class, [
        'model' => $this->clip,
        'type' => 'frontend',
    ])
        ->set('content', 'Test comment')
        ->call('postComment')
        ->assertSee('Comment posted successfully')
        ->assertSee('Test comment');

    Notification::assertSentTo([$this->clip->owner], NewComment::class);
});

it('notifies portal admins if model has no admin', function () {
    signInRole(Role::SUPERADMIN);
    auth()->logout();
    signIn();
    Notification::fake();
    $this->clip->owner_id = null;
    $this->clip->save();
    $this->clip->refresh();

    Livewire::test(CommentsSection::class, [
        'model' => $this->clip,
        'type' => 'frontend',
    ])
        ->set('content', 'Test comment')
        ->call('postComment')
        ->assertSee('Comment posted successfully')
        ->assertSee('Test comment');

    Notification::assertSentTo(User::admins()->get(), NewComment::class);
});
