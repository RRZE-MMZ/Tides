<?php

use App\Enums\Role;
use App\Services\OpencastService;
use App\Services\OpenSearchService;
use App\Services\WowzaService;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\Setup\WorksWithOpencastClient;
use Tests\Setup\WorksWithOpenSearchClient;
use Tests\Setup\WorksWithWowzaClient;

use function Pest\Laravel\get;

uses(WithFaker::class);
uses(WorksWithOpencastClient::class);
uses(WorksWithWowzaClient::class);
uses(WorksWithOpenSearchClient::class);
uses()->group('backend');

beforeEach(function () {
    $this->mockOpencastHandler = $this->swapOpencastClient();
    $this->mockWowzaHandler = $this->swapWowzaClient();
    $this->mockOpenSearchHandler = $this->swapOpenSearchGuzzleClient();

    $this->opencastService = app(OpencastService::class);
    $this->wowzaService = app(WowzaService::class);
    $this->openSearchService = app(OpenSearchService::class);
});

test('a moderator is now allowed to view system cheks page', function () {
    signInRole(Role::MODERATOR);
    $this->mockOpencastHandler->append($this->mockServerNotAvailable());
    $this->mockWowzaHandler->append($this->mockServerNotAvailable());
    $this->mockOpenSearchHandler->append($this->mockClusterHealthResponse());

    get(route('systems.status'))->assertForbidden();
});

it('should check for opencast server', function () {
    signInRole(Role::SUPERADMIN);
    $this->mockOpencastHandler->append($this->mockServerNotAvailable());
    $this->mockWowzaHandler->append($this->mockServerNotAvailable());
    $this->mockOpenSearchHandler->append($this->mockClusterHealthResponse());

    get(route('systems.status'))->assertSee('Opencast version');
});

it('shows an info message if opencast server is not available', function () {
    signInRole(Role::SUPERADMIN);
    $this->mockOpencastHandler->append($this->mockServerNotAvailable());
    $this->mockWowzaHandler->append($this->mockCheckApiConnection());
    $this->mockOpenSearchHandler->append($this->mockClusterNotAvailable());

    get(route('systems.status'))
        ->assertOk()
        ->assertSee('Opencast server not available');
});

it('should check for opencast status', function () {
    signInRole(Role::SUPERADMIN);
    $this->mockOpencastHandler->append($this->mockHealthResponse());
    $this->mockWowzaHandler->append($this->mockCheckApiConnection());
    $this->mockOpenSearchHandler->append($this->mockClusterHealthResponse());

    get(route('systems.status'))->assertOk()->assertSee('8.10.0');
});

it('should check for wowza server', function () {
    signInRole(Role::SUPERADMIN);
    $this->mockOpencastHandler->append($this->mockServerNotAvailable());
    $this->mockWowzaHandler->append($this->mockServerNotAvailable());
    $this->mockOpenSearchHandler->append($this->mockClusterNotAvailable());

    get(route('systems.status'))->assertSee('Wowza description');
});

it('shows an info message if wowza server is not available', function () {
    signInRole(Role::SUPERADMIN);
    $this->mockOpencastHandler->append($this->mockServerNotAvailable());
    $this->mockWowzaHandler->append($this->mockServerNotAvailable());
    $this->mockOpenSearchHandler->append($this->mockClusterHealthResponse());

    get(route('systems.status'))
        ->assertOk()
        ->assertSee('Wowza server not available');
});

it('should check for wowza status', function () {
    signInRole(Role::SUPERADMIN);
    $this->mockOpencastHandler->append($this->mockHealthResponse());
    $this->mockWowzaHandler->append($this->mockCheckApiConnection());
    $this->mockOpenSearchHandler->append($this->mockClusterHealthResponse());

    get(route('systems.status'))
        ->assertOk()
        ->assertSee('Wowza Streaming Engine X Perpetual Edition X.X.X.xxx buildYYYVERSION');
});

it('should check for OpenSearch server', function () {
    signInRole(Role::SUPERADMIN);
    $this->mockOpencastHandler->append($this->mockServerNotAvailable());
    $this->mockWowzaHandler->append($this->mockServerNotAvailable());
    $this->mockOpenSearchHandler->append($this->mockClusterHealthResponse());

    get(route('systems.status'))->assertSee('Search');
});

afterEach(function () {
    // TODO: Change the autogenerated stub
});
