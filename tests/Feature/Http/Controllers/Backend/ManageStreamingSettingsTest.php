<?php

namespace Tests\Feature\Http\Controllers\Backend;

use App\Models\Setting;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ManageStreamingSettingsTest extends TestCase
{
    use RefreshDatabase;

    public Setting $setting;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->signInRole('superadmin');

        $this->setting = Setting::create([
            'name' => 'streaming',
            'data' => [
                'engine_url' => 'localhost:1935',
                'api_url' => 'localhost:8087',
                'username' => 'digest_user',
                'password' => 'digest_password',
                'content_path' => '/content/videoportal',
                'secure_token' => 'awsTides12tvv10',
                'token_prefix' => 'tides',
            ],
        ]);
    }

    /** @test */
    public function it_denies_streaming_settings_page_in_roles_other_than_superadmin(): void
    {
        auth()->logout();

        $this->signInRole('moderator');

        $this->get(route('settings.streaming.show'))->assertForbidden();

        auth()->logout();

        $this->signInRole('assistant');

        $this->get(route('settings.streaming.show'))->assertForbidden();

        auth()->logout();

        $this->signInRole('admin');

        $this->get(route('settings.streaming.show'))->assertForbidden();
    }

    /** @test */
    public function it_shows_streaming_settings_page(): void
    {
        $this->get(route('settings.streaming.show'))
            ->assertOk()
            ->assertViewIs('backend.settings.streaming')
            ->assertViewHas(['setting' => $this->setting->data])
            ->assertSee('localhost:1935')
            ->assertSee('localhost:8087')
            ->assertSee('Digest username')
            ->assertSee('Digest password');
    }

    /** @test */
    public function it_requires_an_streaming_engine_url_for_streaming_settings_page(): void
    {
        $attributes = [
            'api_url' => 'http://localost:8087',
            'username' => 'admin',
            'password' => '1234',
        ];

        $this->put(route('settings.streaming.update', $this->setting), $attributes)
            ->assertSessionHasErrors('engine_url');
    }

    /** @test */
    public function it_requires_an_streaming_api_url_for_streaming_settings_page(): void
    {
        $attributes = [
            'engine_url' => 'http://localost:1935',
            'username' => 'admin',
            'password' => '1234',
        ];

        $this->put(route('settings.streaming.update', $this->setting), $attributes)
            ->assertSessionHasErrors('api_url');
    }

    /** @test */
    public function it_denies_updating_streaming_settings_in_roles_other_than_superadmin(): void
    {
        auth()->logout();

        $attributes = [
            'engine_url' => 'test.com',
            'api_url' => 'test.com',
            'username' => 'test',
            'password' => 1234,
        ];

        $this->signInRole('moderator');

        $this->put(route('settings.streaming.update', $this->setting), $attributes)->assertForbidden();

        auth()->logout();

        $this->signInRole('assistant');

        $this->put(route('settings.streaming.update', $this->setting), $attributes)->assertForbidden();

        auth()->logout();

        $this->signInRole('admin');

        $this->put(route('settings.streaming.update', $this->setting), $attributes)->assertForbidden();
    }

    /** @test */
    public function it_updates_streaming_settings_page(): void
    {
        $attributes = [
            'engine_url' => 'http://test.com',
            'api_url' => 'http://test.com',
            'username' => 'test',
            'password' => 1234,
            'content_path' => '/content/videoportal',
            'secure_token' => 'awsTides12tvv10',
            'token_prefix' => 'tides',
        ];

        $this->put(route('settings.streaming.update', $this->setting), $attributes);

        $this->assertEquals($attributes['engine_url'], $this->setting->streaming()->data['engine_url']);
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
