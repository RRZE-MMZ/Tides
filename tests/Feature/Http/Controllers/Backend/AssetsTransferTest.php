<?php

namespace Tests\Feature\Http\Controllers\Backend;

use App\Enums\Content;
use App\Enums\OpencastWorkflowState;
use App\Jobs\CreateWowzaSmilFile;
use App\Jobs\TransferAssetsJob;
use App\Mail\AssetsTransferred;
use App\Services\OpencastService;
use DOMException;
use Facades\Tests\Setup\ClipFactory;
use Facades\Tests\Setup\FileFactory;
use Facades\Tests\Setup\SeriesFactory;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Bus;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Storage;
use ProtoneMedia\LaravelFFMpeg\Support\FFMpeg;
use Tests\Setup\WorksWithOpencastClient;
use Tests\TestCase;

class AssetsTransferTest extends TestCase
{
    use RefreshDatabase;
    use WorksWithOpencastClient;

    private OpencastService $opencastService;

    private string $role = '';

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Storage::fake('videos');
        Storage::fake('local');
        Storage::fake('thumbnails');

        $this->role = 'moderator';
    }

    /** @test */
    public function a_moderator_can_upload_a_video_file(): void
    {
        $clip = ClipFactory::ownedBy($this->signInRole($this->role))->create();

        $this->post(route('admin.clips.asset.transferSingle', $clip), ['asset' => FileFactory::videoFile()])
            ->assertRedirect($clip->adminPath());

        $asset = $clip->assets()->first();

        $this->assertDatabaseHas('assets', ['path' => $asset->path]);

        Storage::disk('videos')->assertExists($asset->path);
    }

    /** @test */
    public function uploading_a_video_file_will_delete_tmp_file_from_disk(): void
    {
        $clip = ClipFactory::ownedBy($this->signInRole($this->role))->create();

        $this->post(route('admin.clips.asset.transferSingle', $clip), ['asset' => FileFactory::videoFile()])
            ->assertRedirect($clip->adminPath());

        $asset = $clip->assets()->first();

        $this->assertDatabaseHas('assets', ['path' => $asset->path]);

        Storage::disk('videos')->assertExists($asset->path);
        Storage::disk('local')->assertMissing($asset->original_file_name);
    }

    /** @test */
    public function an_asset_must_be_a_video_file(): void
    {
        $this->post(route(
            'admin.clips.asset.transferSingle',
            ClipFactory::ownedBy($this->signInRole($this->role))->create()
        ), [
            'asset' => UploadedFile::fake()->image('avatar.jpg'),
        ])
            ->assertSessionHasErrors('asset');
    }

    /** @test */
    public function uploading_an_asset_should_save_asset_duration(): void
    {
        $clip = ClipFactory::ownedBy($this->signInRole($this->role))->create();

        $this->post(route('admin.clips.asset.transferSingle', $clip), ['asset' => FileFactory::videoFile()]);

        $this->assertEquals(
            10,
            FFMpeg::fromDisk('videos')->open($clip->assets()->first()->path)->getDurationInSeconds()
        );
    }

    /** @test */
    public function uploading_an_asset_should_create_a_clip_poster(): void
    {
        Storage::fake('thumbnails');

        $clip = ClipFactory::ownedBy($this->signInRole($this->role))->create();

        $this->post(route('admin.clips.asset.transferSingle', $clip), ['asset' => $file = FileFactory::videoFile()]);

        $clip->refresh();

        Storage::disk('thumbnails')->assertExists($clip->posterImage);
    }

    /** @test */
    public function a_moderator_can_see_copy_assets_from_dropzone_button(): void
    {
        $clip = ClipFactory::ownedBy($this->signInRole($this->role))->create();

        $this->get($clip->adminPath())->assertSee('Transfer files from drop zone');
    }

    /** @test */
    public function it_has_a_transfer_view_for_dropzone_files(): void
    {
        $this->get(route(
            'admin.clips.dropzone.listFiles',
            ClipFactory::ownedBy($this->signInRole($this->role))->create()
        ))
            ->assertOk()
            ->assertViewIs('backend.clips.dropzone.listFiles');
    }

    /** @test */
    public function a_moderator_cannot_view_drop_zone_files_for_a_not_owned_clip(): void
    {
        $this->signInRole($this->role);

        $this->get(route('admin.clips.dropzone.listFiles', ClipFactory::create()))->assertForbidden();
    }

    /** @test */
    public function dropzone_transfer_view_should_list_all_files_with_sha1_hash(): void
    {
        $disk = Storage::fake('video_dropzone');

        $clip = ClipFactory::ownedBy($this->signInRole($this->role))->create();

        $this->get(route('admin.clips.dropzone.listFiles', ['clip' => $clip]))
            ->assertOk()
            ->assertSee('no videos');

        $disk->putFileAs('', FileFactory::videoFile(), 'export_video_1080.mp4');

        $this->get(route('admin.clips.dropzone.listFiles', ['clip' => $clip]))
            ->assertSee(sha1('export_video_1080.mp4'));
    }

    /** @test */
    public function a_moderator_cannot_transfer_drop_zone_files_for_a_not_owned_clip(): void
    {
        $this->signInRole($this->role);

        $this->post(route('admin.clips.dropzone.transfer', ClipFactory::create()))->assertForbidden();
    }

    /** @test */
    public function it_transfers_files_from_dropzone_to_clip(): void
    {
        $fakeStorage = Storage::fake('video_dropzone');

        $fakeStorage->putFileAs('', FileFactory::videoFile(), 'export_video_1080.mp4');
        $fakeStorage->putFileAs('', FileFactory::videoFile(), 'export_video_720.mp4');
        $fakeStorage->putFileAs('', FileFactory::audioFile(), 'export_audio.mp3');
        $fakeStorage->putFileAs('', FileFactory::videoFile(), 'export_video_360.mp4');

        $files = fetchDropZoneFiles()->sortBy('date_modified');

        $videoHashHD = $files->keys()->first();
        $videoHashSD = $files->keys()->last();

        $clip = ClipFactory::ownedBy($this->signInRole($this->role))->create();

        $this->followingRedirects()->post(
            route('admin.clips.dropzone.transfer', $clip),
            ['files' => [$videoHashHD, $videoHashSD]]
        )->assertOk();

        $this->get($clip->adminPath())
            ->assertSee($files->first()['name'])
            ->assertSee($files->last()['name'])
            ->assertSee('presenter.smil');

        $this->assertEquals(Content::PRESENTER(), $clip->getAssetsByType(Content::PRESENTER)->first()->type);
        $this->assertEquals(Content::SMIL(), $clip->getAssetsByType(Content::SMIL)->first()->type);
    }

    /** @test */
    public function it_should_queue_the_transfer_dropzone_to_clip_job(): void
    {
        Bus::fake();

        $this->post(route(
            'admin.clips.dropzone.transfer',
            ClipFactory::ownedBy($this->signInRole($this->role))->create()
        ), [
            'files' => [
                sha1('test_file_name'),
            ],
        ]);

        Bus::assertChained([
            TransferAssetsJob::class,
            CreateWowzaSmilFile::class,
        ]);
    }

    /** @test */
    public function it_should_send_an_email_after_transfer_job_is_completed(): void
    {
        Mail::fake();

        $this->post(route(
            'admin.clips.dropzone.transfer',
            ClipFactory::ownedBy($this->signInRole($this->role))->create()
        ), [
            'files' => [
                sha1('test_file_name'),
            ],
        ]);

        Mail::assertQueued(AssetsTransferred::class);
    }

    /** @test */
    public function is_should_show_an_empty_list_if_no_opencast_events_found(): void
    {
        $series = SeriesFactory::withClips(2)
            ->ownedBy($this->signInRole($this->role))
            ->withOpencastID()
            ->create();

        $this->get(route('admin.clips.opencast.listEvents', ['clip' => $series->clips()->first()]))
            ->assertOk()
            ->assertSee('no events found for this series');
    }

    /** @test */
    public function opencast_transfer_view_should_list_all_events_with_event_uid(): void
    {
        $series = SeriesFactory::withClips(2)
            ->ownedBy($this->signInRole($this->role))
            ->withOpencastID()
            ->create();

        $mockHandler = $this->swapOpencastClient();

        $this->opencastService = app(OpencastService::class);

        $mockHandler->append(
            $this->mockEventResponse($series, OpencastWorkflowState::SUCCEEDED),
            $this->mockEventResponse($series, OpencastWorkflowState::PAUSED)

        );

        $this->get(route('admin.clips.opencast.listEvents', ['clip' => $series->clips()->first()]))
            ->assertOk()
            ->assertViewHas('events', function (Collection $collection) {
                return $collection->count() == 2;
            });
    }

    /** @test */
    public function a_moderator_cannot_view_opencast_events_list_for_a_not_owned_clip(): void
    {
        $this->signInRole($this->role);

        $this->get(route('admin.clips.opencast.listEvents', ClipFactory::create()))->assertForbidden();
    }

    /** @test */
    public function it_should_queue_the_transfer_opencast_assets_job(): void
    {
        Bus::fake();

        $opencastEventID = $this->faker->uuid();

        $archiveVersion = 2;
        $audioUID = $this->faker->uuid();
        $videoHD_UID = $this->faker->uuid();

        $mockHandler = $this->swapOpencastClient();

        $this->opencastService = app(OpencastService::class);

        $mockHandler->append(
            $this->mockEventByEventID($opencastEventID, OpencastWorkflowState::SUCCEEDED, $archiveVersion),
            $this->mockEventAssets($videoHD_UID, $audioUID)
        );
        $this->opencastService = app(OpencastService::class);

        $this->post(route(
            'admin.clips.opencast.transfer',
            ClipFactory::ownedBy($this->signInRole($this->role))->create()
        ), [
            'eventID' => $this->faker->uuid(),
        ]);

        Bus::assertChained([
            TransferAssetsJob::class,
            CreateWowzaSmilFile::class,
        ]);
    }

    /** @test */
    public function it_shows_an_error_on_opencast_transfer_if_event_is_not_a_uuid(): void
    {
        $clip = ClipFactory::ownedBy($this->signInRole($this->role))->create();

        $this->post(route('admin.clips.opencast.transfer', $clip), ['eventID' => 'test'])
            ->assertSessionHasErrors('eventID');

        $eventID = $this->faker->uuid();

        $this->post(route('admin.clips.opencast.transfer', $clip), ['eventID' => $eventID])
            ->assertSessionDoesntHaveErrors('eventID');
    }

    /** @test
     * @throws DOMException
     */
    public function it_transfers_opencast_event_assets_to_clip(): void
    {
        $fakeStorage = Storage::fake('opencast_archive');

        $opencastEventID = $this->faker->uuid();
        $archiveVersion = 2;
        $audioUID = $this->faker->uuid();
        $videoHD_UID = $this->faker->uuid();

        $mockHandler = $this->swapOpencastClient();

        $this->opencastService = app(OpencastService::class);

        $mockHandler->append(
            $this->mockEventByEventID($opencastEventID, OpencastWorkflowState::SUCCEEDED, $archiveVersion),
            $this->mockEventAssets($videoHD_UID, $audioUID)
        );

        $fakeStorage
            ->putFileAs(
                '',
                FileFactory::videoFile(),
                '/archive/mh_default_org/'.
                $opencastEventID.'/'.$archiveVersion.'/'.$audioUID.'.mp3'
            );
        $fakeStorage
            ->putFileAs(
                '',
                FileFactory::videoFile(),
                '/archive/mh_default_org/'.
                $opencastEventID.'/'.$archiveVersion.'/'.$videoHD_UID.'.m4v'
            );

        $clip = ClipFactory::ownedBy($this->signInRole($this->role))->create();

        $this->post(
            route('admin.clips.opencast.transfer', $clip),
            ['eventID' => $opencastEventID]
        )->assertStatus(302);

        $mockHandler->append($this->mockHealthResponse());

        $this->get($clip->adminPath())
            ->assertSee($videoHD_UID)
            ->assertSee($audioUID)
            ->assertSee('presenter.smil');
    }
}
