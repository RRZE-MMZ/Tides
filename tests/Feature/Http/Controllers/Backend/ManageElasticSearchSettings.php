<?php

namespace Tests\Feature\Http\Controllers\Backend;

use App\Enums\Role;
use App\Models\Setting;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ManageElasticSearchSettings extends TestCase
{
    use RefreshDatabase;

    public Setting $setting;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->signInRole(Role::SUPERADMIN);

        $this->setting = Setting::create([
            'name' => 'elasticSearch',
            'data' => config('settings.elasticSearch'),
        ]);
    }

    /** @test */
    public function it_denies_elasticSearch_settings_page_in_roles_other_than_superadmin(): void
    {
        auth()->logout();

        $this->signInRole(Role::MODERATOR);

        $this->get(route('settings.elasticSearch.show'))->assertForbidden();

        auth()->logout();

        $this->signInRole(Role::ASSISTANT);

        $this->get(route('settings.elasticSearch.show'))->assertForbidden();

        auth()->logout();

        $this->signInRole(Role::ADMIN);

        $this->get(route('settings.elasticSearch.show'))->assertForbidden();
    }

    /** @test */
    public function it_shows_elasticSearch_settings_page(): void
    {
        $this->get(route('settings.elasticSearch.show'))
            ->assertOk()
            ->assertViewIs('backend.settings.elasticSearch')
            ->assertSee('URL')
            ->assertSee('port')
            ->assertSee('username')
            ->assertSee('password');
    }

    /** @test */
    public function it_requires_a_server_url_and_port_for_elasticsearch_settings_page(): void
    {
        $attributes = [
            'username' => Role::ADMIN,
            'password' => '1234',
        ];

        $this->put(route('settings.elasticSearch.update', $this->setting), $attributes)
            ->assertSessionHasErrors(['url', 'port']);
    }

    /** @test */
    public function it_denied_updating_elasticSearch_settings_in_roles_other_than_superadmin(): void
    {
        auth()->logout();

        $attributes = [
            'url' => 'http://test.com',
            'port' => 9200,
            'username' => 'elastic',
            'password' => 'changeme',
        ];

        $this->signInRole(Role::MODERATOR);

        $this->put(route('settings.elasticSearch.update', $this->setting), $attributes)->assertForbidden();

        auth()->logout();

        $this->signInRole(Role::ASSISTANT);

        $this->put(route('settings.elasticSearch.update', $this->setting), $attributes)->assertForbidden();

        auth()->logout();

        $this->signInRole(Role::ADMIN);

        $this->put(route('settings.elasticSearch.update', $this->setting), $attributes)->assertForbidden();

        $this->assertEquals('localhost', Setting::elasticSearch()->data['url']);
    }

    /** @test */
    public function it_updates_elasticSearch_settings_page(): void
    {
        $attributes = [
            'url' => 'http://test.com',
            'port' => 9200,
            'username' => 'elastic',
            'password' => 'password',
        ];

        $this->put(route('settings.elasticSearch.update', $this->setting), $attributes)->assertRedirect();

        $this->setting->refresh();

        $this->assertEquals($attributes['url'], $this->setting->elasticSearch()->data['url']);
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
