<?php

namespace Tests\Feature\Http\Controllers\Backend;

use App\Enums\OpencastWorkflowState;
use App\Enums\Role;
use App\Models\Series;
use App\Services\OpencastService;
use Facades\Tests\Setup\SeriesFactory;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\Setup\WorksWithOpencastClient;
use Tests\TestCase;

class SeriesOpencastControllerTest extends TestCase
{
    use RefreshDatabase;
    use WorksWithOpencastClient;

    private OpencastService $opencastService;

    private Series $series;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $mockHandler = $this->swapOpencastClient();

        $this->opencastService = app(OpencastService::class);

        $this->series = SeriesFactory::withOpencastID()->create();

        $mockHandler->append(
            $this->mockHealthResponse(),
            $this->mockSeriesMetadata($this->series),
            $this->mockSeriesRunningWorkflowsResponse($this->series),
            $this->mockEventResponse($this->series, OpencastWorkflowState::RUNNING),
            $this->mockCreateSeriesResponse()
        );
    }

    /** @test */
    public function it_allows_create_opencast_series_only_for_portal_admins(): void
    {
        $mockHandler = $this->swapOpencastClient();
        $this->opencastService = app(OpencastService::class);
        auth()->logout();

        $this->post(route('series.opencast.createSeries', $this->series))->assertRedirectToRoute('login');

        $this->signInRole(Role::MODERATOR);

        $this->post(route('series.opencast.createSeries', $this->series))->assertForbidden();

        auth()->logout();

        $ownedSeries = SeriesFactory::ownedBy($this->signInRole(Role::MODERATOR))->create();

        $this->post(route('series.opencast.createSeries', $ownedSeries))->assertForbidden();

        auth()->logout();

        $this->signInRole(Role::ADMIN);

        $mockHandler->append(
            $this->mockHealthResponse(), //health
            $this->mockNoResultsResponse(), // seriesInfo
            $this->mockNoResultsResponse(), //recording
            $this->mockNoResultsResponse(), //running
            $this->mockNoResultsResponse(), //scheduled
            $this->mockNoResultsResponse(), //failed
            $this->mockNoTrimmingResultsResponse(), //trimming
            $this->mockNoResultsResponse(), //upcoming
            $this->mockCreateSeriesResponse(),
        );

        $this->post(route('series.opencast.createSeries', $ownedSeries))->assertRedirect();
    }

    /** @test */
    public function it_updates_opencast_series_id_for_the_given_series(): void
    {
        $mockHandler = $this->swapOpencastClient();
        $this->opencastService = app(OpencastService::class);
        $oldSeriesId = $this->series->opencast_series_id;

        $this->signInRole(Role::ADMIN);

        $mockHandler->append(
            $this->mockHealthResponse(), //health
            $this->mockNoResultsResponse(), // seriesInfo
            $this->mockNoResultsResponse(), //recording
            $this->mockNoResultsResponse(), //running
            $this->mockNoResultsResponse(), //scheduled
            $this->mockNoResultsResponse(), //failed
            $this->mockNoTrimmingResultsResponse(), //trimming
            $this->mockNoResultsResponse(), //upcoming
            $this->mockCreateSeriesResponse(),
        );
        $this->post(route('series.opencast.createSeries', $this->series));

        $this->series->refresh();

        $this->assertNotSame($oldSeriesId, $this->series->opencast_series_id);
    }

    /** @test */
    public function an_admin_can_update_opencast_acl_for_a_series(): void
    {
        $mockHandler = $this->swapOpencastClient();
        $this->opencastService = app(OpencastService::class);
        auth()->logout();

        $this->signInRole(Role::MODERATOR);

        $this->post(route('series.opencast.updateSeriesAcl', $this->series))->assertForbidden();

        auth()->logout();

        $mockHandler->append(
            $this->mockHealthResponse(), //health
            $this->mockNoResultsResponse(), // seriesInfo
            $this->mockNoResultsResponse(), //recording
            $this->mockNoResultsResponse(), //running
            $this->mockNoResultsResponse(), //scheduled
            $this->mockNoResultsResponse(), //failed
            $this->mockNoTrimmingResultsResponse(), //trimming
            $this->mockNoResultsResponse(), //upcoming
            $this->mockCreateSeriesResponse(),
        );
        $this->signInRole(Role::ADMIN);

        $this->post(route('series.opencast.updateSeriesAcl', $this->series))->assertRedirect();
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
