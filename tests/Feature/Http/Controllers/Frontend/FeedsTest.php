<?php

namespace Tests\Feature\Http\Controllers\Frontend;

use App\Models\Clip;
use App\Models\Series;
use Facades\Tests\Setup\ClipFactory;
use Facades\Tests\Setup\SeriesFactory;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Carbon;
use Tests\TestCase;

class FeedsTest extends TestCase
{
    use RefreshDatabase;

    private Series $series;

    private Clip $clip;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->series = SeriesFactory::withClips(2)->withAssets(2)->create();
        $this->clip = ClipFactory::withAssets(2)->create();
    }

    /** @test */
    public function it_has_a_series_feed(): void
    {
        $this->get(route('frontend.series.feed', [$this->series, 'QHD']))->assertOk();
    }

    /** @test */
    public function it_has_a_channel_item_in_series_feed_page(): void
    {
        $this->get(route('frontend.series.feed', [$this->series, 'QHD']))->assertSee('<channel>', false);
    }

    /** @test */
    public function it_has_a_title_item_in_series_feed_page(): void
    {
        $this->get(route('frontend.series.feed', [$this->series, 'QHD']))
            ->assertSee('<title>', false)
            ->assertSee($this->series->title);
    }

    /** @test */
    public function it_has_a_link_item_in_series_feed_page(): void
    {
        $this->get(route('frontend.series.feed', [$this->series, 'QHD']))
            ->assertSee('<link>', false)
            ->assertSee(route('frontend.series.feed', [$this->series, 'QHD']));
    }

    /** @test */
    public function it_has_a_language_item_in_series_feed_page(): void
    {
        $this->get(route('frontend.series.feed', [$this->series, 'QHD']))
            ->assertSee('<language>', false)
            ->assertSee($this->series->clipsLanguageCode());
    }

    /** @test */
    public function it_has_a_copyright_item_in_series_feed_page(): void
    {
        $this->get(route('frontend.series.feed', [$this->series, 'QHD']))
            ->assertSee('<copyright>', false)
            ->assertSee(Carbon::now()->year.' Tides Portal');
    }

    /** @test */
    public function it_has_an_itunes_author_item_in_series_feed_page(): void
    {
        $this->get(route('frontend.series.feed', [$this->series, 'QHD']))
            ->assertSee('<itunes:author>', false)
            ->assertSee($this->series->presenters()->first()?->getFullNameAttribute());
    }

    /** @test */
    public function it_has_a_description_item_in_series_feed_page(): void
    {
        $this->get(route('frontend.series.feed', [$this->series, 'QHD']))
            ->assertSee('<description>', false)
            ->assertSee($this->series->description);
    }

    /** @test */
    public function it_has_an_itunes_type_item_on_series_feed_page(): void
    {
        $this->get(route('frontend.series.feed', [$this->series, 'QHD']))
            ->assertSee('<itunes:type>', false)
            ->assertSee('serial')
            ->assertSee($this->series->description);
    }

    /** @test */
    public function it_has_an_itunes_owner_item_on_series_feed_page(): void
    {
        $this->get(route('frontend.series.feed', [$this->series, 'QHD']))
            ->assertSee('<itunes:owner>', false)
            ->assertSee('<itunes:name>', false)
            ->assertSee('<itunes:email>', false);
    }

    /** @test */
    public function it_has_an_itunes_image_item_on_series_feed_page(): void
    {
        $this->get(route('frontend.series.feed', [$this->series, 'QHD']))
            ->assertSee('<itunes:image>', false);
    }

    /** @test */
    public function it_has_an_itunes_summary_item_in_series_feed_page(): void
    {
        $this->get(route('frontend.series.feed', [$this->series, 'QHD']))
            ->assertSee('<itunes:summary>', false);
    }

    /** @test */
    public function it_has_an_itunes_category_item_in_series_feed_page(): void
    {
        $this->get(route('frontend.series.feed', [$this->series, 'QHD']))
            ->assertSee('<itunes:category text="Education"/>', false);
    }

    /** @test */
    public function it_has_an_itunes_keywords_item_in_series_feed_page(): void
    {
        $this->get(route('frontend.series.feed', [$this->series, 'QHD']))
            ->assertSee('<itunes:keywords>', false)->assertSee('Tides Portal, Tides');
    }

    /** @test */
    public function it_has_an_itunes_explicit_item_in_series_feed_page(): void
    {
        $this->get(route('frontend.series.feed', [$this->series, 'QHD']))
            ->assertSee('<itunes:explicit>no</itunes:explicit>', false);
    }

    /** @test */
    public function it_does_not_have_an_item_item_for_a_series_without_clips_in_series_feed_page(): void
    {
        $seriesWithClipsWithoutAssets = Series::factory()->create();

        $this->get(route('frontend.series.feed', [$seriesWithClipsWithoutAssets, 'QHD']))
            ->assertDontSee('<item>', false);
    }

    /** @test */
    public function it_has_an_item_item_in_series_feed_page(): void
    {
        $this->get(route('frontend.series.feed', [$this->series, 'QHD']))
            ->assertSee('<item>', false);
    }

    /** @test */
    public function it_has_a_title_item_under_item_in_series_feed_page(): void
    {
        $this->get(route('frontend.series.feed', [$this->series, 'QHD']))
            ->assertSee('<title>', false);
    }

    /** @test */
    public function it_has_an_itunes_duration_item_under_item_in_series_feed_page(): void
    {
        $this->get(route('frontend.series.feed', [$this->series, 'QHD']))
            ->assertSee('<itunes:duration>', false);
    }

    /** @test */
    public function it_has_an_enclosure_item_in_series_feed_page(): void
    {
        $this->get(route('frontend.series.feed', [$this->series, 'QHD']))
            ->assertSee('<enclosure url="', false);
    }

    /** @test */
    public function it_has_an_guid_item_in_series_feed_page(): void
    {
        $this->get(route('frontend.series.feed', [$this->series, 'QHD']))
            ->assertSee('<guid isPermaLink="', false);
    }

    /** @test */
    public function it_has_pubDate_item_in_series_feed_page(): void
    {
        $this->get(route('frontend.series.feed', [$this->series, 'QHD']))
            ->assertSee('<pubDate>', false)
            ->assertSee($this->series->clips()->first()->recording_date);
    }

    /** @test */
    public function it_has_a_clips_feed(): void
    {
        $this->get(route('frontend.clips.feed', [$this->clip, 'QHD']))->assertOk();
    }

    /** @test */
    public function it_has_a_channel_item_in_clips_feed_page(): void
    {
        $this->get(route('frontend.clips.feed', [$this->clip, 'QHD']))->assertSee('<channel>', false);
    }

    /** @test */
    public function it_has_a_title_item_in_clip_feed_page(): void
    {
        $this->get(route('frontend.clips.feed', [$this->clip, 'QHD']))
            ->assertSee('<title>', false)
            ->assertSee($this->clip->title);
    }

    /** @test */
    public function it_has_a_link_item_in_clips_feed_page(): void
    {
        $this->get(route('frontend.clips.feed', [$this->clip, 'QHD']))
            ->assertSee('<link>', false)
            ->assertSee(route('frontend.series.feed', [$this->clip, 'QHD']));
    }

    /** @test */
    public function it_has_a_language_item_in_clips_feed_page(): void
    {
        $this->get(route('frontend.clips.feed', [$this->clip, 'QHD']))
            ->assertSee('<language>', false)
            ->assertSee($this->clip->language->code);
    }

    /** @test */
    public function it_has_a_copyright_item_in_clips_feed_page(): void
    {
        $this->get(route('frontend.clips.feed', [$this->clip, 'QHD']))
            ->assertSee('<copyright>', false)
            ->assertSee(Carbon::now()->year.' Tides Portal');
    }

    /** @test */
    public function it_has_an_itunes_author_item_in_clips_feed_page(): void
    {
        $this->get(route('frontend.clips.feed', [$this->clip, 'QHD']))
            ->assertSee('<itunes:author>', false)
            ->assertSee($this->clip->presenters()->first()?->getFullNameAttribute());
    }

    /** @test */
    public function it_has_a_description_item_in_clips_feed_page(): void
    {
        $this->get(route('frontend.clips.feed', [$this->clip, 'QHD']))
            ->assertSee('<description>', false)
            ->assertSee($this->clip->description);
    }

    /** @test */
    public function it_has_an_itunes_type_item_on_clips_feed_page(): void
    {
        $this->get(route('frontend.clips.feed', [$this->clip, 'QHD']))
            ->assertSee('<itunes:type>', false)
            ->assertSee('episodic')
            ->assertSee($this->clip->description);
    }

    /** @test */
    public function it_has_an_itunes_owner_item_on_clips_feed_page(): void
    {
        $this->get(route('frontend.clips.feed', [$this->clip, 'QHD']))
            ->assertSee('<itunes:owner>', false)
            ->assertSee('<itunes:name>', false)
            ->assertSee('<itunes:email>', false);
    }

    /** @test */
    public function it_has_an_itunes_image_item_on_clips_feed_page(): void
    {
        $this->get(route('frontend.clips.feed', [$this->clip, 'QHD']))
            ->assertSee('<itunes:image>', false);
    }

    /** @test */
    public function it_has_an_itunes_summary_item_in_clips_feed_page(): void
    {
        $this->get(route('frontend.clips.feed', [$this->clip, 'QHD']))
            ->assertSee('<itunes:summary>', false);
    }

    /** @test */
    public function it_has_an_itunes_category_item_in_clips_feed_page(): void
    {
        $this->get(route('frontend.clips.feed', [$this->clip, 'QHD']))
            ->assertSee('<itunes:category text="Education"/>', false);
    }

    /** @test */
    public function it_has_an_itunes_keywords_item_in_clips_feed_page(): void
    {
        $this->get(route('frontend.clips.feed', [$this->clip, 'QHD']))
            ->assertSee('<itunes:keywords>', false)->assertSee('Tides Portal, Tides');
    }

    /** @test */
    public function it_has_an_itunes_explicit_item_in_clips_feed_page(): void
    {
        $this->get(route('frontend.clips.feed', [$this->clip, 'QHD']))
            ->assertSee('<itunes:explicit>no</itunes:explicit>', false);
    }

    /** @test */
    public function it_does_not_have_an_item_item_for_a_clips_without_assets_in_clips_feed_page(): void
    {
        $clipWithoutAssets = Clip::factory()->create();

        $this->get(route('frontend.clips.feed', [$clipWithoutAssets, 'QHD']))
            ->assertDontSee('<item>', false);
    }

    /** @test */
    public function it_has_an_item_item_in_clips_feed_page(): void
    {
        $this->get(route('frontend.clips.feed', [$this->clip, 'QHD']))
            ->assertSee('<item>', false);
    }

    /** @test */
    public function it_has_a_title_item_under_item_in_clips_feed_page(): void
    {
        $this->get(route('frontend.clips.feed', [$this->clip, 'QHD']))
            ->assertSee('<title>', false);
    }

    /** @test */
    public function it_has_an_itunes_duration_item_under_item_in_clips_feed_page(): void
    {
        $this->get(route('frontend.clips.feed', [$this->clip, 'QHD']))
            ->assertSee('<itunes:duration>', false);
    }

    /** @test */
    public function it_has_an_enclosure_item_in_clips_feed_page(): void
    {
        $this->get(route('frontend.clips.feed', [$this->clip, 'QHD']))
            ->assertSee('<enclosure url="', false);
    }

    /** @test */
    public function it_has_an_guid_item_in_clips_feed_page(): void
    {
        $this->get(route('frontend.clips.feed', [$this->clip, 'QHD']))
            ->assertSee('<guid isPermaLink="', false);
    }

    /** @test */
    public function it_has_pubDate_item_in_clips_feed_page(): void
    {
        $this->get(route('frontend.clips.feed', [$this->clip, 'QHD']))
            ->assertSee('<pubDate>', false)
            ->assertSee($this->clip->recording_date);
    }
}
