<?php

use App\Models\Clip;
use App\Models\Series;
use Facades\Tests\Setup\ClipFactory;
use Facades\Tests\Setup\SeriesFactory;
use Illuminate\Support\Carbon;

use function Pest\Laravel\get;

uses()->group('frontend');

beforeEach(function () {
    // TODO: Change the autogenerated stub
    $this->series = SeriesFactory::withClips(2)->withAssets(2)->create();
    $this->clip = ClipFactory::withAssets(2)->create();
});

it('has a series feed', function () {
    get(route('frontend.series.feed', [$this->series, 'QHD']))->assertOk();
});

it('has a channel item in series feed page', function () {
    get(route('frontend.series.feed', [$this->series, 'QHD']))->assertSee('<channel>', false);
});

it('has a title item in series feed page', function () {
    get(route('frontend.series.feed', [$this->series, 'QHD']))
        ->assertSee('<title>', false)
        ->assertSee($this->series->title);
});

it('has a link item in series feed page', function () {
    get(route('frontend.series.feed', [$this->series, 'QHD']))
        ->assertSee('<link>', false)
        ->assertSee(route('frontend.series.feed', [$this->series, 'QHD']));
});

it('has a language item in series feed page', function () {
    get(route('frontend.series.feed', [$this->series, 'QHD']))
        ->assertSee('<language>', false)
        ->assertSee($this->series->clipsLanguageCode());
});

it('has a copyright item in series feed page', function () {
    get(route('frontend.series.feed', [$this->series, 'QHD']))
        ->assertSee('<copyright>', false)
        ->assertSee(Carbon::now()->year.' Tides Portal');
});

it('has an itunes author item in series feed page', function () {

    get(route('frontend.series.feed', [$this->series, 'QHD']))
        ->assertSee('<itunes:author>', false);
});

it('has a description item in series feed page', function () {
    get(route('frontend.series.feed', [$this->series, 'QHD']))
        ->assertSee('<description>', false)
        ->assertSee($this->series->description);
});

it('has an itunes type item on series feed page', function () {
    get(route('frontend.series.feed', [$this->series, 'QHD']))
        ->assertSee('<itunes:type>', false)
        ->assertSee('serial')
        ->assertSee($this->series->description);
});

it('has an itunes owner item on series feed page', function () {
    get(route('frontend.series.feed', [$this->series, 'QHD']))
        ->assertSee('<itunes:owner>', false)
        ->assertSee('<itunes:name>', false)
        ->assertSee('<itunes:email>', false);
});

it('has an itunes image item on series feed page', function () {
    get(route('frontend.series.feed', [$this->series, 'QHD']))
        ->assertSee('<itunes:image>', false);
});

it('has an itunes summary item in series feed page', function () {
    get(route('frontend.series.feed', [$this->series, 'QHD']))
        ->assertSee('<itunes:summary>', false);
});

it('has an itunes category item in series feed page', function () {
    get(route('frontend.series.feed', [$this->series, 'QHD']))
        ->assertSee('<itunes:category text="Education"/>', false);
});

it('has an itunes keywords item in series feed page', function () {
    get(route('frontend.series.feed', [$this->series, 'QHD']))
        ->assertSee('<itunes:keywords>', false)->assertSee('Tides Portal, Tides');
});

it('has an itunes explicit item in series feed page', function () {
    get(route('frontend.series.feed', [$this->series, 'QHD']))
        ->assertSee('<itunes:explicit>no</itunes:explicit>', false);
});

it('does not have an item item for a series without clips in series feed page', function () {
    $seriesWithClipsWithoutAssets = Series::factory()->create();

    get(route('frontend.series.feed', [$seriesWithClipsWithoutAssets, 'QHD']))
        ->assertDontSee('<item>', false);
});

it('has an item item in series feed page', function () {
    get(route('frontend.series.feed', [$this->series, 'QHD']))
        ->assertSee('<item>', false);
});

it('has a title item under item in series feed page', function () {
    get(route('frontend.series.feed', [$this->series, 'QHD']))
        ->assertSee('<title>', false);
});

it('has an itunes duration item under item in series feed page', function () {
    get(route('frontend.series.feed', [$this->series, 'QHD']))
        ->assertSee('<itunes:duration>', false);
});

it('has an enclosure item in series feed page', function () {
    get(route('frontend.series.feed', [$this->series, 'QHD']))
        ->assertSee('<enclosure url="', false);
});

it('has an guid item in series feed page', function () {
    get(route('frontend.series.feed', [$this->series, 'QHD']))
        ->assertSee('<guid isPermaLink="', false);
});

it('has pub date item in series feed page', function () {
    get(route('frontend.series.feed', [$this->series, 'QHD']))
        ->assertSee('<pubDate>', false)
        ->assertSee($this->series->clips()->first()->recording_date);
});

it('has a clips feed', function () {
    get(route('frontend.clips.feed', [$this->clip, 'QHD']))->assertOk();
});

it('has a channel item in clips feed page', function () {
    get(route('frontend.clips.feed', [$this->clip, 'QHD']))->assertSee('<channel>', false);
});

it('has a title item in clip feed page', function () {
    get(route('frontend.clips.feed', [$this->clip, 'QHD']))
        ->assertSee('<title>', false)
        ->assertSee($this->clip->title);
});

it('has a link item in clips feed page', function () {
    get(route('frontend.clips.feed', [$this->clip, 'QHD']))
        ->assertSee('<link>', false)
        ->assertSee(route('frontend.series.feed', [$this->clip, 'QHD']));
});

it('has a language item in clips feed page', function () {
    get(route('frontend.clips.feed', [$this->clip, 'QHD']))
        ->assertSee('<language>', false)
        ->assertSee($this->clip->language->code);
});

it('has a copyright item in clips feed page', function () {
    get(route('frontend.clips.feed', [$this->clip, 'QHD']))
        ->assertSee('<copyright>', false)
        ->assertSee(Carbon::now()->year.' Tides Portal');
});

it('has an itunes author item in clips feed page', function () {
    get(route('frontend.clips.feed', [$this->clip, 'QHD']))
        ->assertSee('<itunes:author>', false)
        ->assertSee($this->clip->presenters()->first()?->getFullNameAttribute());
});

it('has a description item in clips feed page', function () {
    get(route('frontend.clips.feed', [$this->clip, 'QHD']))
        ->assertSee('<description>', false)
        ->assertSee($this->clip->description);
});

it('has an itunes type item on clips feed page', function () {
    get(route('frontend.clips.feed', [$this->clip, 'QHD']))
        ->assertSee('<itunes:type>', false)
        ->assertSee('episodic')
        ->assertSee($this->clip->description);
});

it('has an itunes owner item on clips feed page', function () {
    get(route('frontend.clips.feed', [$this->clip, 'QHD']))
        ->assertSee('<itunes:owner>', false)
        ->assertSee('<itunes:name>', false)
        ->assertSee('<itunes:email>', false);
});

it('has an itunes image item on clips feed page', function () {
    get(route('frontend.clips.feed', [$this->clip, 'QHD']))
        ->assertSee('<itunes:image>', false);
});

it('has an itunes summary item in clips feed page', function () {
    get(route('frontend.clips.feed', [$this->clip, 'QHD']))
        ->assertSee('<itunes:summary>', false);
});

it('has an itunes category item in clips feed page', function () {
    get(route('frontend.clips.feed', [$this->clip, 'QHD']))
        ->assertSee('<itunes:category text="Education"/>', false);
});

it('has an itunes keywords item in clips feed page', function () {
    get(route('frontend.clips.feed', [$this->clip, 'QHD']))
        ->assertSee('<itunes:keywords>', false)->assertSee('Tides Portal, Tides');
});

it('has an itunes explicit item in clips feed page', function () {
    get(route('frontend.clips.feed', [$this->clip, 'QHD']))
        ->assertSee('<itunes:explicit>no</itunes:explicit>', false);
});

it('does not have an item item for a clips without assets in clips feed page', function () {
    $clipWithoutAssets = Clip::factory()->create();

    get(route('frontend.clips.feed', [$clipWithoutAssets, 'QHD']))
        ->assertDontSee('<item>', false);
});

it('has an item item in clips feed page', function () {
    get(route('frontend.clips.feed', [$this->clip, 'QHD']))
        ->assertSee('<item>', false);
});

it('has a title item under item in clips feed page', function () {
    get(route('frontend.clips.feed', [$this->clip, 'QHD']))
        ->assertSee('<title>', false);
});

it('has an itunes duration item under item in clips feed page', function () {
    get(route('frontend.clips.feed', [$this->clip, 'QHD']))
        ->assertSee('<itunes:duration>', false);
});

it('has an enclosure item in clips feed page', function () {
    get(route('frontend.clips.feed', [$this->clip, 'QHD']))
        ->assertSee('<enclosure url="', false);
});

it('has an guid item in clips feed page', function () {
    get(route('frontend.clips.feed', [$this->clip, 'QHD']))
        ->assertSee('<guid isPermaLink="', false);
});

it('has pub date item in clips feed page', function () {
    get(route('frontend.clips.feed', [$this->clip, 'QHD']))
        ->assertSee('<pubDate>', false)
        ->assertSee($this->clip->recording_date);
});
