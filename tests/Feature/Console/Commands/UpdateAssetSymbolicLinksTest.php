<?php

namespace Tests\Feature\Console\Commands;

use App\Enums\Acl;
use App\Models\Asset;
use Facades\Tests\Setup\ClipFactory;
use Facades\Tests\Setup\FileFactory;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;

class UpdateAssetSymbolicLinksTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Storage::fake('assetsSymLinks');
        Storage::fake('local');
        Storage::fake('thumbnails');
        Storage::fake('videos');
    }

    /** @test */
    public function it_outputs_av_assets_count(): void
    {
        $clip = ClipFactory::withAssets(3)->create();

        //add another non AV type asset on the clip
        Asset::factory()->create(['type' => 5, 'clip_id' => $clip->id]);

        $this->artisan('links:update-assets-symbolic-links')->expectsOutput('Processing 3 Audio/Video assets');
    }

    /** @test */
    public function it_creates_a_symbolic_link_if_clip_is_open(): void
    {
        $clip = ClipFactory::ownedBy($this->signInRole('admin'))->create();

        $this->post(route('admin.clips.asset.transferSingle', $clip), ['asset' => FileFactory::videoFile()]);

        $clip->addAcls(collect(Acl::PUBLIC()));

        $this->artisan('links:update-assets-symbolic-links');

        $asset = $clip->assets()->first();

        Storage::disk('assetsSymLinks')->assertExists($asset->guid.'.'.getFileExtension($asset));
    }

    /** @test */
    public function it_deletes_a_symbolic_link_if_clip_acl_is_no_longer_open(): void
    {
        $clip = ClipFactory::ownedBy($this->signInRole('admin'))->create();

        $this->post(route('admin.clips.asset.transferSingle', $clip), ['asset' => FileFactory::videoFile()]);

        $clip->addAcls(collect(1));

        $this->artisan('links:update-assets-symbolic-links');

        $asset = $clip->assets()->first();

        Storage::disk('assetsSymLinks')->assertExists($asset->guid.'.'.getFileExtension($asset));

        $clip->addAcls(collect([Acl::PORTAL(), Acl::PASSWORD()]));

        $this->artisan('links:update-assets-symbolic-links');

        Storage::disk('assetsSymLinks')->assertMissing($asset->guid.'.'.getFileExtension($asset));
    }

    /** @test */
    public function it_does_nothing_if_clip_is_protected(): void
    {
        $clip = ClipFactory::ownedBy($this->signInRole('admin'))->create();

        $this->post(route('admin.clips.asset.transferSingle', $clip), ['asset' => FileFactory::videoFile()]);

        $clip->addAcls(collect(Acl::PORTAL()));

        $asset = $clip->assets()->first();

        $this->artisan('links:update-assets-symbolic-links')
            ->expectsOutput('Clip:'.$asset->clip->title.' is protected. Moving to the next one');

        Storage::disk('assetsSymLinks')->assertMissing($asset->guid.'.'.getFileExtension($asset));
    }
}
