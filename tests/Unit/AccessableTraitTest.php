<?php

namespace Tests\Unit;

use App\Enums\Acl;
use App\Enums\Role;
use App\Models\Clip;
use Facades\Tests\Setup\ClipFactory;
use Illuminate\Database\Eloquent\Relations\MorphToMany;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class AccessableTraitTest extends TestCase
{
    use RefreshDatabase;

    protected Clip $clip;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->clip = ClipFactory::withAssets(2)->create(['password' => '1234qweR']);
    }

    /** @test */
    public function it_has_an_acl_method_for_model(): void
    {
        $this->assertInstanceOf(MorphToMany::class, $this->clip->acls());
    }

    /** @test */
    public function it_can_add_acls_to_model(): void
    {
        $this->clip->addAcls(collect([Acl::PASSWORD(), Acl::PORTAL()]));

        $this->assertEquals(2, $this->clip->acls()->count());
    }

    /** @test */
    public function it_check_object_portal_acl(): void
    {
        $this->clip->addAcls(collect([Acl::PORTAL()]));

        $this->clip->refresh();

        $this->assertFalse($this->clip->checkAcls());

        $this->signIn();

        $this->assertTrue($this->clip->checkAcls());

        auth()->logout();
    }

    /** @test */
    public function it_check_object_acl_for_admins(): void
    {
        $this->clip->addAcls(collect([Acl::PORTAL()]));

        $this->assertFalse($this->clip->checkAcls());

        $this->signInRole(Role::ADMIN);

        $this->assertTrue(($this->clip->checkAcls()));

        auth()->logout();
    }

    /** @test */
    public function it_check_object_lms_acl(): void
    {
        $this->clip->addAcls(collect([Acl::LMS()]));

        $this->clip->refresh();

        $this->assertFalse($this->clip->checkAcls());

        //generate session token cookie for test to pass
        $this->get(getAccessToken($this->clip, dechex(time()), Acl::LMS->lower(), true));

        $this->assertTrue($this->clip->checkAcls());
    }

    /** @test */
    public function it_check_object_password_acl(): void
    {
        $this->clip->addAcls(collect([Acl::PASSWORD()]));

        $this->clip->refresh();

        $this->assertFalse($this->clip->checkAcls());

        $this->get(getAccessToken($this->clip, dechex(time()), Acl::PASSWORD->lower(), true));

        $this->assertTrue($this->clip->checkAcls());
    }
}
