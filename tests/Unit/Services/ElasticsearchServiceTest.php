<?php

use App\Services\ElasticsearchService;
use Facades\Tests\Setup\ClipFactory;
use Facades\Tests\Setup\SeriesFactory;
use Illuminate\Support\Collection;
use Tests\Setup\WorksWithElasticsearchClient;

uses(WorksWithElasticsearchClient::class);
uses()->group('unit');

beforeEach(function () {
    // TODO: Change the autogenerated stub
});

it('creates a series index if elasticsearch is available', function () {
    $series = SeriesFactory::create();
    $this->startStream($series);
    $this->mockSingleDocument();
    $elasticsearchService = app(ElasticsearchService::class);
    $response = $elasticsearchService->fetchDocument('tides_series', 'series_1');

    expect($response->get('hits')['hits'][0]['_source']['title'])->toEqual($series->title);
    expect($response)->toBeInstanceOf(Collection::class);
});

it('creates a clip index if elasticsearch is available', function () {
    $clip = ClipFactory::create();
    $this->startStream($clip);
    $this->mockSingleDocument();
    $elasticsearchService = app(ElasticsearchService::class);
    $response = $elasticsearchService->fetchDocument('tides_clip', 'clip_1');

    expect($response->get('hits')['hits'][0]['_source']['title'])->toEqual($clip->title);
    expect($response)->toBeInstanceOf(Collection::class);
});

afterEach(function () {
    // TODO: Change the autogenerated stub
    $this->closeStream();
});
