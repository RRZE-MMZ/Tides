<?php

namespace Tests\Unit\Services;

use App\Services\ElasticsearchService;
use Facades\Tests\Setup\SeriesFactory;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Facades\Tests\Setup\ClipFactory;
use Illuminate\Support\Collection;
use Tests\Setup\WorksWithElasticsearchClient;
use Tests\TestCase;

class ElasticsearchServiceTest extends TestCase
{
    use RefreshDatabase;
    use WorksWithElasticsearchClient;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /** @test */
    public function it_creates_a_series_index_if_elasticsearch_is_available(): void
    {
        $series = SeriesFactory::create();

        $this->startStream($series);
        $this->mockSingleDocument();
        $elasticsearchService = app(ElasticsearchService::class);

        $response = $elasticsearchService->fetchDocument('tides_series', 'series_1');

        $this->assertEquals($series->title, $response->get('_source')['title']);
        $this->assertInstanceOf(Collection::class, $response);
    }

    /** @test */
    public function it_creates_a_clip_index_if_elasticsearch_is_available(): void
    {
        $clip = ClipFactory::create();

        $this->startStream($clip);
        $this->mockSingleDocument();
        $elasticsearchService = app(ElasticsearchService::class);

        $response = $elasticsearchService->fetchDocument('tides_clip', 'clip_1');

        $this->assertEquals($clip->title, $response->get('_source')['title']);
        $this->assertInstanceOf(Collection::class, $response);

    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        $this->closeStream();
    }
}
