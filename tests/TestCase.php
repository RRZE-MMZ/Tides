<?php

namespace Tests;

use App\Models\AcademicDegree;
use App\Models\Acl;
use App\Models\Organization;
use App\Models\Role;
use App\Models\Semester;
use App\Models\Setting;
use App\Models\User;
use Illuminate\Foundation\Testing\TestCase as BaseTestCase;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Config;

abstract class TestCase extends BaseTestCase
{
    use CreatesApplication;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        //set log file to app folder to bypass any failures in docker containers
        Config::set('logging.channels.single.path', storage_path('logs/laravel.log'));

        AcademicDegree::create([
            'title' => 'Dr.',
        ]);

        Acl::create([
            'name' => 'free',
            'description' => 'Material is accessed via portal log in',
        ]);
        Acl::create([
            'name' => 'portal',
            'description' => 'Material is accessed via portal log in',
        ]);

        Acl::create([
            'name' => 'password',
            'description' => 'Material is accessed via a password',
        ]);

        Acl::create([
            'name' => 'lms',
            'description' => 'Material is accessed via LMS (moodle, Ilias, etc.) log in',
        ]);

        Semester::create([
            'name' => 'Sommersemester '.Carbon::now()->year,
            'acronym' => 'S21',
            'short_title' => Carbon::now()->year,
            'start_date' => Carbon::now()->year.'-04-01 00:00:00',
            'stop_date' => Carbon::now()->year.'-09-30 23:59:59',
        ]);

        Semester::create([
            'name' => 'Wintersemester '.Carbon::now()->year.'/'.Carbon::now()->year + 1,
            'acronym' => 'W21',
            'short_title' => Carbon::now()->year.'/'.Carbon::now()->year + 1,
            'start_date' => Carbon::now()->year.'-10-01 00:00:00',
            'stop_date' => Carbon::now()->year + 1 .'-03-31 23:59:59',
        ]);

        Organization::create([
            'org_id' => 1,
            'name' => 'Tides organization unit',
            'parent_org_id' => 1,
            'orgno' => '0000000000',
            'shortname' => 'Main organization unit',
            'staff' => null,
            'startdate' => now(),
            'enddate' => '2999-12-31',
            'operationstartdate' => now(),
            'operationenddate' => '2999-12-31',
            'created_at' => now(),
            'updated_at' => null,
        ]);

        Setting::create([
            'name' => 'opencast',
            'data' => \config('settings.opencast'),
        ]);

        Setting::create([
            'name' => 'streaming',
            'data' => \config('settings.streaming'),
        ]);

        Setting::create([
            'name' => 'portal',
            'data' => \config('settings.portal'),
        ]);

        Role::create([
            'name' => 'superadmin',
        ]);

        Role::create([
            'name' => 'admin',
        ]);

        Role::create([
            'name' => 'moderator',
        ]);

        Role::create([
            'name' => 'assistant',
        ]);

        Role::create([
            'name' => 'user',
        ]);
    }

    /**
     * @param  User|null  $user
     * @return User
     */
    protected function signIn(User $user = null): User
    {
        $user = $user ?: User::factory()->create();

        $this->actingAs($user);

        return $user;
    }

    /**
     * @param  string  $role
     * @return User
     */
    protected function signInRole(string $role = ''): User
    {
        $user = User::factory()->create();

        $user->assignRole($role);

        $this->actingAs($user);

        return $user;
    }
}
