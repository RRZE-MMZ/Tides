<?php

namespace Tests;

use App\Models\AcademicDegree;
use App\Models\Acl;
use App\Models\Article;
use App\Models\Image;
use App\Models\Language;
use App\Models\Organization;
use App\Models\Role;
use App\Models\Semester;
use App\Models\Setting;
use App\Models\User;
use Illuminate\Foundation\Testing\TestCase as BaseTestCase;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Config;
use Str;

abstract class TestCase extends BaseTestCase
{
    use CreatesApplication;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->withoutVite();
        //set log file to app folder to bypass any failures in docker containers
        Config::set('logging.channels.single.path', storage_path('logs/laravel.log'));

        AcademicDegree::create([
            'title' => 'Dr.',
        ]);

        Acl::create([
            'name' => 'free',
            'description' => 'Material is accessed via portal log in',
        ]);
        Acl::create([
            'name' => 'portal',
            'description' => 'Material is accessed via portal log in',
        ]);

        Acl::create([
            'name' => 'password',
            'description' => 'Material is accessed via a password',
        ]);

        Acl::create([
            'name' => 'lms',
            'description' => 'Material is accessed via LMS (moodle, Ilias, etc.) log in',
        ]);

        Article::create([
            'title_en' => 'Contact',
            'content_en' => 'Contact page',
            'title_de' => 'Kontakt',
            'content_de' => 'Kontakt Seite',
            'slug' => 'contact',
            'is_published' => true,
        ]);

        Article::create([
            'title_en' => 'FAQ',
            'content_en' => 'FAQ page',
            'title_de' => 'FAQ',
            'content_de' => 'FAQ Seite',
            'slug' => 'faq',
            'is_published' => true,
        ]);

        Language::create([
            'id' => '1',
            'code' => 'de',
            'name' => 'Deutsch',
            'long_code' => 'de-DE',
            'order_int' => 1,
        ]);

        Language::create([
            'id' => '2',
            'code' => 'en',
            'name' => 'English',
            'long_code' => 'en-US',
            'order_int' => 1,
        ]);

        Semester::create([
            'name' => 'Wintersemester '.Carbon::now()->year,
            'acronym' => 'W'.Carbon::now()->format('y') - 1,
            'short_title' => Carbon::now()->year - 1 .'/'.Carbon::now()->year - 1,
            'start_date' => Carbon::now()->year - 1 .'-10-01 00:00:00',
            'stop_date' => Carbon::now()->year.'-03-31 23:59:59',
        ]);

        Semester::create([
            'name' => 'Sommersemester '.Carbon::now()->year,
            'acronym' => 'S'.Carbon::now()->format('y'),
            'short_title' => Carbon::now()->year,
            'start_date' => Carbon::now()->year.'-04-01 00:00:00',
            'stop_date' => Carbon::now()->year.'-09-30 23:59:59',
        ]);

        Semester::create([
            'name' => 'Wintersemester '.Carbon::now()->year.'/'.Carbon::now()->year + 1,
            'acronym' => 'W'.Carbon::now()->format('y'),
            'short_title' => Carbon::now()->year.'/'.Carbon::now()->year + 1,
            'start_date' => Carbon::now()->year.'-10-01 00:00:00',
            'stop_date' => Carbon::now()->year + 1 .'-03-31 23:59:59',
        ]);

        Organization::create([
            'org_id' => 1,
            'name' => 'Tides organization unit',
            'slug' => Str::of('Tides organization unit')->slug('-'),
            'parent_org_id' => 1,
            'orgno' => '0000000000',
            'shortname' => 'Main organization unit',
            'staff' => null,
            'startdate' => now(),
            'enddate' => '2999-12-31',
            'operationstartdate' => now(),
            'operationenddate' => '2999-12-31',
            'created_at' => now(),
            'updated_at' => null,
        ]);

        Setting::create([
            'name' => 'opencast',
            'data' => \config('settings.opencast'),
        ]);

        Setting::create([
            'name' => 'streaming',
            'data' => \config('settings.streaming'),
        ]);

        Setting::create([
            'name' => 'openSearch',
            'data' => \config('settings.openSearch'),
        ]);

        Setting::create([
            'name' => 'portal',
            'data' => \config('settings.portal'),
        ]);

        Image::create([
            'description' => 'Default image description',
            'file_name' => UploadedFile::fake()->create('avatar.png', '300', 'image/png')->getClientOriginalName(),
            'file_path' => 'images',
            'thumbnail_path' => UploadedFile::fake()->create('avatar.png', '300', 'image/png')->getClientOriginalName().'_thumb.png',
            'mime_type' => 'image/png',
            'file_size' => '300',
        ]);

        foreach (\App\Enums\Role::cases() as $role) {
            Role::create([
                'id' => $role->value,
                'name' => $role->lower(),
            ]);
        }
    }

    protected function signIn(?User $user = null): User
    {
        $user = $user ?: User::factory()->create();

        $this->actingAs($user);

        return $user;
    }

    protected function signInRole(\App\Enums\Role $role): User
    {
        $user = User::factory()->create();

        $user->assignRole($role);

        $this->actingAs($user);

        return $user;
    }
}
