<?php

namespace App\Models;

use App\Events\SeriesDeleted;
use App\Models\Traits\Accessable;
use App\Models\Traits\Documentable;
use App\Models\Traits\Presentable;
use App\Models\Traits\RecordsActivity;
use App\Models\Traits\Searchable;
use App\Models\Traits\Slugable;
use App\Observers\SeriesObserver;
use Illuminate\Database\Eloquent\Attributes\ObservedBy;
use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Database\Eloquent\Relations\MorphMany;
use Illuminate\Support\Arr;
use Illuminate\Support\Carbon;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;
use Psr\Http\Message\ResponseInterface;

#[ObservedBy(SeriesObserver::class)]
class Series extends BaseModel
{
    use Accessable;
    use Documentable;
    use Presentable;
    use RecordsActivity;
    use Searchable;
    use Slugable;

    protected $dispatchesEvents = ['deleted' => SeriesDeleted::class];

    protected static function boot(): void
    {
        parent::boot();
        static::creating(function ($series) {
            $semester = Semester::current()->get()->first()->acronym;
            $series->setSlugAttribute($series->title.'-'.$semester);
        });
    }

    /**
     * Series routes should work with slug and with id to ensure backward compatibility
     */
    public function resolveRouteBinding($value, $field = null): ?Model
    {
        $series = $this->where('slug', $value)->first();
        if (is_null($series)) {
            $series = $this->where('id', (int) $value)->firstOrFail();
        }

        return $series;
    }

    /**
     * Route key should be slug instead of id
     */
    public function getRouteKeyName(): string
    {
        return 'slug'; // TODO: Change the autogenerated stub
    }

    /**
     * A series belongs to a user
     */
    public function owner(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    /**
     * Series subscribers
     */
    public function subscribers(): BelongsToMany
    {
        return $this->belongsToMany(User::class, 'series_subscriptions')->withTimestamps();
    }

    /**
     * Add a user to series
     */
    public function addMember(User $moderatorUser): User
    {
        $this->members()->attach($moderatorUser);

        return $moderatorUser;
    }

    /**
     * Series members
     */
    public function members(): BelongsToMany
    {
        return $this->belongsToMany(User::class, 'series_members')->withTimestamps();
    }

    /**
     * Remove a user from series
     */
    public function removeMember(User $moderatorUser): User
    {
        $this->members()->detach($moderatorUser);

        return $moderatorUser;
    }

    /**
     * A series belongs to an organization unit
     */
    public function organization(): BelongsTo
    {
        return $this->BelongsTo(Organization::class, 'organization_id', 'org_id');
    }

    /**
     * A series belongs to an image
     */
    public function image(): BelongsTo
    {
        return $this->BelongsTo(Image::class);
    }

    /**
     * A series can have many chapters
     */
    public function chapters(): HasMany
    {
        return $this->hasMany(Chapter::class);
    }

    /**
     * Get all the series's comments.
     */
    public function comments(): MorphMany
    {
        return $this->morphMany(Comment::class, 'commentable');
    }

    /**
     * Fetch the latest clip from a series based on episode
     */
    public function latestClip(): HasOne
    {
        return $this->hasOne(Clip::class)->latestOfMany('episode');
    }

    /**
     * Add a clip on a series
     */
    public function addClip(array $validated = []): Clip
    {
        $validated = Arr::add($validated, 'owner_id', auth()->user()->id);

        $clip = $this->clips()->create(Arr::except($validated, ['tags', 'acls', 'presenters']));

        $clip->addTags(collect($validated['tags']));

        return $clip;
    }

    /**
     * A series can have many clips
     */
    public function clips(): HasMany
    {
        return $this->hasMany(Clip::class);
    }

    /**
     * Reorder Series clips based on a collection <id, episode>
     *
     * @return $this
     */
    public function reorderClips(Collection $episodes): static
    {
        $episodes->each(function ($value, $key) {
            $clip = Clip::find($key);
            $clip->episode = $value;
            $clip->save();
        });

        return $this;
    }

    /**
     * Updates opencast series id in series table
     */
    public function updateOpencastSeriesId(ResponseInterface $response): void
    {
        if (! empty($response->getHeaders())) {
            $this->opencast_series_id = Str::afterLast($response->getHeaders()['Location'][0], 'api/series/');

            //do not record this activity
            $this->updateQuietly();
        }
    }

    public function views(): int
    {
        return $this->clips->load('assets.viewCount')->sum(function ($clip) {
            // For each clip, sum the views of all its assets
            return $clip->assets->sum(function ($asset) {
                // Sum the views for each asset from its statsCounter entries
                return $asset->viewCount->sum('counter'); // 'counter' is the column for the views
            });
        });
    }

    // Method to sum all geo location data across clips' assets associated with this series, grouped by month
    public function sumGeoLocationDataGroupedByMonth(): array
    {
        $clips = $this->clips()->with(['assets.geoCount' => function ($query) {
            $query->select(
                'resourceid',
                'month',
                DB::raw('SUM(world) AS total_world'),
                DB::raw('SUM(bavaria) AS total_bavaria'),
                DB::raw('SUM(germany) AS total_germany')
            )->groupBy('resourceid', 'month')->orderBy('month', 'desc');
        }])->get();

        $monthlyData = [];

        foreach ($clips as $clip) {
            foreach ($clip->assets as $asset) {
                foreach ($asset->geoCount as $geo) {
                    $month = Carbon::parse($geo->month)->format('Y - F');
                    if (! isset($monthlyData[$month])) {
                        $monthlyData[$month] = ['total_world' => 0, 'total_bavaria' => 0, 'total_germany' => 0];
                    }
                    $monthlyData[$month]['total_world'] += $geo->total_world;
                    $monthlyData[$month]['total_bavaria'] += $geo->total_bavaria;
                    $monthlyData[$month]['total_germany'] += $geo->total_germany;
                }
            }
        }

        krsort($monthlyData);
        // Aggregate totals
        $total = ['total_world' => 0, 'total_bavaria' => 0, 'total_germany' => 0];
        foreach ($monthlyData as $month => $data) {
            $total['total_world'] += $data['total_world'];
            $total['total_bavaria'] += $data['total_bavaria'];
            $total['total_germany'] += $data['total_germany'];
        }

        // Optionally, add the total as a separate entry if needed
        //        $monthlyData['Total'] = $total;

        // If you don't want to modify the original monthly data but still need the total,
        // you can return both separately
        return [
            'monthlyData' => $monthlyData,
            'total' => $total,
        ];

        // Or simply return the monthly data if the total should be calculated/displayed differently
        // return $monthlyData;
    }

    /**
     * Returns a comma seperated acls list for all clips
     *
     * @return mixed
     */
    public function fetchClipsAcls(): string
    {
        /*
         * for visitors fetch only clips that containing a video asset
         */
        $clips = (auth()->user()?->id === $this->owner_id || auth()->user()?->isAdmin())
            ? $this->clips
            : $this->clips->filter(fn ($clip) => $clip->assets->count() && $clip->is_public && ! $clip->is_livestream);

        //iterate every clip and get a unique acl name
        return $clips->map(function ($clip) {
            return $clip->acls->pluck('name');
        })->flatten()->unique()->values()->implode(', ');
    }

    /**
     * Returns a comma seperated semester name for all clips
     *
     * @return mixed
     */
    public function fetchClipsSemester(): string
    {
        return $this->clips
            ->sortBy('semester_id')
            ->map(function ($clip) {
                return $clip->semester;
            })
            ->pluck('name')
            ->unique()
            ->implode(', ');
    }

    /**
     * Returns a comma seperated language codes for every series clip
     *
     * @return mixed
     */
    public function clipsLanguageCode(): string
    {
        return $this->clips->map(function ($clip) {
            return $clip->language()->first()->code;
        })->flatten()->unique()->implode(', ');
    }

    public function checkClipAcls(Collection $clips)
    {
        foreach ($clips as $clip) {
            return $clip->checkAcls();
        }
    }

    public function lastPublicClip(): BelongsTo
    {
        return $this->belongsTo(Clip::class);
    }

    public function scopeWithLastPublicClip($query)
    {
        return $query->addSelect(['last_public_clip_id' => Clip::select('id')
            ->public()
//            ->withVideoAssets()
            ->whereColumn('series_id', 'series.id')
            ->orderByDesc('episode')
            ->take(1),
        ]);
    }

    public function scopeHasClipsWithAcl($query, \App\Enums\Acl $acl): mixed
    {
        return $query->whereHas('clips', function ($q) use ($acl) {
            $q->public()->whereHas('acls', function ($aclQuery) use ($acl) {
                $aclQuery->where('acl_id', $acl());
            });
        });
    }

    /**
     *  Scope a query to only include public series
     */
    public function scopeIsPublic($query): mixed
    {
        return $query->where('is_public', 1);
    }

    public function scopeHasClipsWithAssets($query): mixed
    {
        return $query->whereHas('clips', function ($q) {
            $q->public()->withVideoAssets()->limit(1);
        });
    }

    public function scopeCurrentSemester($query): mixed
    {
        return $query->whereHas('clips', function ($q) {
            $q->whereHas('semester', function ($q) {
                $q->current();
            });
        })->orWhere('owner_id', auth()->user()?->id);
    }

    public function scopeHasOpencastSeriesID($query): mixed
    {
        return $query->Where('opencast_series_id', '<>', '');
    }

    public function clipsWithoutChapter(?Chapter $chapter = null): mixed
    {
        return $this->clips->filter(function ($clip) use ($chapter) {
            return ($chapter) ? $clip->chapter_id !== $chapter->id : $clip->chapter_id === null;
        });
    }

    public function fetchLivestreamClip(): ?Clip
    {
        return $this->clips()->where('is_livestream', true)->first();
    }

    public function getSeriesACLSUpdated()
    {
        return $this->clips()->select('id', 'is_public', 'has_video_assets')->get()
            ->filter(function ($clip) {
                return $clip->is_public && $clip->has_video_assets;
            })
            ->map(fn ($clip) => $clip->acls->pluck('name'))->flatten()->unique()->values()
            ->implode(', ');
    }

    protected function title(): Attribute
    {
        return Attribute::make(
            get: fn ($value) => html_entity_decode(
                htmlspecialchars_decode(
                    html_entity_decode(html_entity_decode($value, ENT_NOQUOTES, 'UTF-8'))
                )
            )
        );
    }

    protected function description(): Attribute
    {
        return Attribute::make(
            get: fn ($value) => html_entity_decode(
                htmlspecialchars_decode(
                    html_entity_decode(html_entity_decode($value, ENT_NOQUOTES, 'UTF-8'))
                )
            )
        );
    }
}
