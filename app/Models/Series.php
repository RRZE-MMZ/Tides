<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Support\Arr;
use Illuminate\Support\Collection;
use Illuminate\Support\Str;
use Psr\Http\Message\ResponseInterface;

class Series extends BaseModel
{
    use Accessable;
    use Slugable;

    /**
     * A series can have many clips
     *
     * @return HasMany
     */
    public function clips(): HasMany
    {
        return $this->hasMany(Clip::class);
    }

    /**
     * Fetch the latest clip from a series based on episode
     * @return HasOne
     */
    public function latestClip(): HasOne
    {
        return $this->hasOne(Clip::class)->latestOfMany('episode');
    }

    /**
     * Series public url
     *
     * @return string
     */
    public function path(): string
    {
        return "/series/{$this->slug}";
    }

    /**
     * Series admin edit url
     *
     * @return string
     */
    public function adminPath(): string
    {
        return "/admin/series/{$this->slug}";
    }

    /**
     * Route key should be slug instead of id
     *
     * @return string
     */
    public function getRouteKeyName(): string
    {
        return 'slug'; // TODO: Change the autogenerated stub
    }

    /**
     * A series belongs to a user
     *
     * @return BelongsTo
     */
    public function owner(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    /**
     * A series has one organization unit
     * @return HasOne
     */
    public function organization(): HasOne
    {
        return $this->hasOne(Organization::class);
    }

    /**
     * Add a clip on a series
     *
     * @param array $validated
     * @return Clip
     */
    public function addClip(array $validated = []): Clip
    {
        $validated = Arr::add($validated, 'owner_id', auth()->user()->id);

        $clip = $this->clips()->create(Arr::except($validated, ['tags', 'acls', 'presenters']));

        $clip->addTags(collect($validated['tags']));

        return $clip;
    }

    /**
     * Updates opencast series id in series table
     *
     * @param ResponseInterface $response
     */
    public function updateOpencastSeriesId(ResponseInterface $response): void
    {
        if (!empty($response->getHeaders())) {
            $this->opencast_series_id = Str::afterLast($response->getHeaders()['Location'][0], 'api/series/');

            $this->update();
        }
    }

    /**
     * Returns a comma seperated acls list for all clips
     *
     * @return mixed
     */
    public function fetchClipsAcls(): string
    {
        //iterate every clip and get a unique acl name
        return $this->clips->map(function ($clip) {
            return $clip->acls()->pluck('name');
        })->flatten()->unique()->values()->implode(', ');
    }

    /**
     *  Scope a query to only include public series
     *
     * @param $query
     * @return mixed
     */
    public function scopeIsPublic($query): mixed
    {
        return $query->where('isPublic', 1);
    }
}
